{"title":"WDC Global Time Series","description":"Djvue app template. If you is author or collaborator use design tools for modify it","keywords":[],"isPublished":true,"pages":[{"title":"Home","layout":"layout-1-2","holders":{"Top":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"subheading primary--text\" style=\"padding-bottom:3em;\">\n    <center>\n        <h1>\n            <span>\n                <img src=\"{{app.config.icon}}\" style=\"width:1em;padding:0.5em 0 0 0\">\n            </span>\n            {{app.title}}\n        </h1>\n        Dynamic reload content\n    </center>    \n</div>","script":""},"id":"brc5hkwvwqn","activated":false}]},"Column 1":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<center>\n    <i>DJ{{app.config.description}}</i>    \n</center>\n","script":""},"id":"eqrqp6siyuf","activated":false}]},"Column 2":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<center>\n    <i>This page use 1-2 column layout.</i>    \n</center>\n","script":""},"id":"oax4m3z4ep","activated":false}]}},"url":"https://jace-dev.herokuapp.com/design/WDC-Global-Time-Series#/"},{"layout":"flex","sections":[{"align":"justify-center","holders":[{"name":"default","width":11}]},{"align":"justify-center","holders":[{"name":"vqlies8ti6","width":2},{"name":"5uhfv5ieju3","width":9}]}],"holders":{"default":{"widgets":[{"type":"dps-suite-widget","name":"noname_clone_fog7bi8n3ev_clone_mbpqhw2h65","icon":"mdi-card-text-outline","options":{"widget":{"visible":true}},"scripts":[{"name":"1","script":"<?javascript\n    $scope.params =  {\n  \"collection\": \"sdi-threats\",\n  \"indicators\": [\n   {\n    \"column\": \"bpp\",\n    \"name\": \"BBP\",\n    \"title\": \"Biological balance\"\n   }\n  ],\n  \"regions\": [\n   {\n    \"title\": \"Ukraine\",\n    \"id\": \"UKR\",\n    \"index\": 0\n   },\n   {\n    \"title\": \"United Kingdom\",\n    \"id\": \"GBR\",\n    \"index\": 1\n   }\n  ]\n }\n?>\n\n\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year,\n            }\n            $scope.params.indicators.forEach( d => {\n                res[d.name] = (item.value[d.column]) ? item.value[d.column] : null\n            })\n            return res\n        }\n    ?>\n)\n\nc.limit(5)\n\n// c.order(by:\"year\")\n// set(\"data\")\n\n// <?javascript\n//     $scope.res = {\n//         legend: $scope.params.indicators.map( i => i.title),\n//         xAxis: $scope.data.map(d => d.year),\n//         series: $scope.params.indicators.map( i => ({\n//             name: i.title,\n//             type:\"line\",\n//             smooth:true,\n//             data: $scope.data.map( d => ({\n//                 year: d.year,\n//                 value:d[i.name]\n//             })),\n//             areaStyle: {\n// \t\t\t\topacity: 0.03\n// \t\t\t}\n//         }))    \n//     }\n    \n    \n// ?>\n\n// return(\"res\")"},{"name":"GET_METADATA","script":"\ndml.select(from:<? $scope.metadataCollection ?>, return:\"value\")"},{"name":"GET_SERIES_FOR_REG","script":"// <?javascript\n//     $scope.params =  {\n//   \"collection\": \"sdi-threats\",\n//   \"indicators\": [\n//   {\n//     \"column\": \"bbp\",\n//     \"name\": \"BBP\",\n//     \"title\": \"Biological balance\"\n//   }\n//   ],\n//   \"regions\": [\n//   {\n//     \"title\": \"Ukraine\",\n//     \"id\": \"UKR\",\n//     \"index\": 0\n//   },\n//   {\n//     \"title\": \"United Kingdom\",\n//     \"id\": \"GBR\",\n//     \"index\": 1\n//   }\n//   ]\n//  }\n// ?>\n\n\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year,\n            }\n            $scope.params.indicators.forEach( d => {\n                res[d.name] = (item.value[d.column]) ? item.value[d.column] : null\n            })\n            return res\n        }\n    ?>\n)\n\nc.order(by:\"year\")\nset(\"data\")\n\n<?javascript\n    $scope.res = {\n        legend: $scope.params.indicators.map( i => i.title),\n        xAxis: $scope.data.map(d => d.year),\n        series: $scope.params.indicators.map( i => ({\n            name: i.title,\n            type:\"line\",\n            smooth:true,\n            data: $scope.data.map( d => ({\n                year: d.year,\n                value:d[i.name]\n            })),\n            areaStyle: {\n\t\t\t\topacity: 0.03\n\t\t\t}\n        }))    \n    }\n    \n    \n?>\n\nreturn(\"res\")"},{"name":"GET_SERIES_FOR_IND","script":"\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year,\n            }\n            res.value = (item.value[$scope.params.indicators[0].column]) \n                    ? Number.parseFloat(Number.parseFloat(item.value[$scope.params.indicators[0].column]).toFixed(3)) \n                    : null\n            \n            return res\n        }\n    ?>\n)\n\nc.order(by:\"year\")\nset(\"data\")\n\n<?javascript\n    $scope.res = {\n        legend: $scope.params.regions.map( d => d.id ),\n        \n        xAxis: _.unique($scope.data.map(d => d.year)),\n        \n        series: $scope.params.regions.map( i => ({\n            name: i.id,\n            type: \"line\",\n            smooth: true,\n            areaStyle: {\n\t\t\t\topacity: 0.03\n\t\t\t},\n            data: $scope.data.filter( d => d[\"3_alpha_code\"] == i.id)\n                    .map( d => ({\n                        year: d.year,\n                        value: d.value\n                    }))\n        }))    \n    }\n    \n    \n?>\n\n\nreturn(\"res\")"},{"name":"GET_TABLE_FOR_REG","script":"\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year\n            }\n            $scope.params.indicators.forEach( d => {\n                res[d.name] = (item.value[d.column]) ? Number.parseFloat(item.value[d.column]).toFixed(3) : null\n            })\n            return res\n        }\n    ?>\n)\n\nc.order(by:\"year\")\nset(\"data\")\n\n<?javascript\n\n    let years = _.unique($scope.data.map( d => d.year))\n    \n    years.forEach(y => {\n        $scope.params.regions.forEach( r => {\n            let f = _.find($scope.data, d => d.year == y && d[\"3_alpha_code\"] == r.id)\n            if(!f){\n                let n = {\n                    year: y,\n                    \"3_alpha_code\": r.id\n                }\n                $scope.params.indicators.forEach( d => {\n                    n[d.name] = null\n                })\n                \n                $scope.data.push(n)\n            }\n        })\n    })\n    \n\n    \n    $scope.res = {\n        dataset:{\n            dimensions:[\"Indicator\"].concat($scope.data.map(d => d.year)),\n            source: $scope.params.indicators.map( i => {\n              let record = { Indicator: i.title }\n              $scope.data.map(d => d.year).forEach( d => {\n                  let r = _.find($scope.data, r => r.year == d)    \n                  record[d] = (r[i.name]) ? r[i.name] : null \n              })\n              return record\n            })\n        }\n    }    \n\n?>\n\nreturn(\"res\")"},{"name":"GET_TABLE_FOR_IND","script":"// <?javascript\n//     $scope.params = {\n//     \"collection\": \"sdi-d7\",\n//     \"indicators\": [\n//       {\n//         \"column\": \"inv\",\n//         \"name\": \"INV\",\n//         \"title\": \" Industry, value added\"\n//       }\n//     ],\n//     \"regions\": [\n//       {\n//         \"title\": \"Afghanistan\",\n//         \"id\": \"AFG\",\n//         \"index\": 0\n//       },\n//       {\n//         \"title\": \"Ukraine\",\n//         \"id\": \"UKR\",\n//         \"index\": 1\n//       }\n//     ]\n//   }\n// ?>\n\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year\n            }\n            res.value = (item.value[$scope.params.indicators[0].column]) \n                    ? Number.parseFloat(item.value[$scope.params.indicators[0].column]).toFixed(3) \n                    : null\n            \n            return res\n        }\n    ?>\n)\n\nc.order(by:\"year\")\nset(\"data\")\n\n\n<?javascript\n    \n    let years = _.unique($scope.data.map( d => d.year))\n    \n    years.forEach(y => {\n        $scope.params.regions.forEach( r => {\n            let f = _.find($scope.data, d => d.year == y && d[\"3_alpha_code\"] == r.id)\n            if(!f){\n                let n = {\n                    year: y,\n                    \"3_alpha_code\": r.id\n                }\n                $scope.params.indicators.forEach( d => {\n                    n[d.name] = null\n                })\n                \n                $scope.data.push(n)\n            }\n        })\n    })\n    \n\n\n    $scope.res = {\n        dataset:{\n            dimensions:[\"Region\"].concat(_.unique($scope.data.map(d => d.year))),\n            source: $scope.params.regions.map( i => {\n              let record = { Region: i.title }\n              $scope.data.map(d => d.year).forEach( d => {\n                  let r = _.find($scope.data, r => r.year == d && r[\"3_alpha_code\"] == i.id)    \n                  record[d] = (r && r.value) ? r.value : null \n              })\n              return record\n            })\n        }\n    }    \n?>\n   \n\n\nreturn(\"res\")"},{"name":"GET_INDICATOR_TITLE","script":"\n<?html\n    <div class=\"pa-0 ma-0\" style=\"border:1px solid #afafaf; background:white;\">\n    <div class=\"px-4 mx-4 py-3 my-0\">\n    <h2 class=\"primary--text subheading font-weight-light\">\n        <i class=\"primary--text subheading ${icon}\"></i>                  \n                  ${name} (${concept})\n    </h2>\n            <p class=\"subtitle-2 pr-3 mb-0 font-weight-light dj-meta\">\n              <span class=\"font-weight-medium\">\n                Type:\n              </span>\n              ${type}\n            </p>\n            <p class=\"subtitle-2 pr-3 mb-0 font-weight-light dj-meta\">\n              <span class=\"font-weight-medium\">\n                Definition:\n              </span>\n              ${definition}\n            </p>\n            <p class=\"subtitle-2 pr-3 mb-0 font-weight-light dj-meta\">\n              <span class=\"font-weight-medium\">\n                Units:\n              </span>\n              ${units}\n            </p>\n            <p class=\"subtitle-2 pr-3 mb-0 font-weight-light dj-meta\">\n              <span class=\"font-weight-medium\">\n                Source:\n              </span>\n              ${source} <a :href=\"selected.href\">${href}</a>\n            </p>\n        </div> \n    </div>    \n?>\n\nset(var:\"template\")\n\n<?javascript\n   \n    $scope.data = {\n     \"icon\": ($scope.data.type==\"measure\")? 'mdi mdi-numeric': 'mdi mdi-calculator',\n     \"concept\": $scope.data.concept || \"\",\n     \"type\": $scope.data.type || \"\",\n     \"topic\": $scope.data.topic || \"\",\n     \"name\": $scope.data.name || \"\",\n     \"range\": $scope.data.range || \"\",\n     \"units\": $scope.data.units || \"\",\n     \"source\": $scope.data.source || \"\",\n     \"href\": $scope.data.href || \"\",\n     \"definition\":$scope.data.definition || \"\" \n    }\n    \n    $scope.res = _.template($scope.template)($scope.data)\n?>\nget(\"res\")\nhtml()\n"},{"name":"GET_REGIONS","script":"\ndml.select(from:\"wdi-countries\", return:\"value\")\nc.order(\"long_name\")\nc.map(<? \n    d => ({\n        title: d.long_name,\n        id: d[\"3_alpha_code\"]\n    })\n?>)"},{"name":"GET_INDICATORS","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: GET_INDICATORS\n **     SERVICE: http://localhost:8098\n **\n **/\ndml.select(from:\"wdc-global-concepts\", return:\"value\")\nc.order(\"name\")\nc.map(<? \n    d => ({\n        title: d.name,\n        id: d.concept,\n        data: d\n    })\n?>)"},{"name":"GET_BAR_SERIES","script":"// <?javascript\n// $scope.params = {\n//  \"collection\": \"sdi-d7\",\n//  \"indicators\": [\n//   {\n//   \"column\": \"inv\",\n//   \"name\": \"INV\",\n//   \"title\": \" Industry, value added\"\n//   }\n//  ],\n//  \"regions\": [\n//   {\n//   \"title\": \"Afghanistan\",\n//   \"id\": \"AFG\",\n//   \"index\": 0\n//   },\n//   {\n//   \"title\": \"Ukraine\",\n//   \"id\": \"UKR\",\n//   \"index\": 1\n//   },\n//   {\n//   \"title\": \"Andorra\",\n//   \"id\": \"AND\",\n//   \"index\": 2\n//   }\n//  ]\n// }\n// ?>\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year\n            }\n            $scope.params.indicators.forEach( d => {\n                res[d.name] = (item.value[d.column]) ? Number.parseFloat(item.value[d.column]).toFixed(3) : null\n            })\n            return res\n        }\n    ?>\n)\n\nc.order(by:\"year\")\nset(\"data\")\n\n<?javascript\n\n    let years = _.unique($scope.data.map( d => d.year))\n    \n    years.forEach(y => {\n        $scope.params.regions.forEach( r => {\n            let f = _.find($scope.data, d => d.year == y && d[\"3_alpha_code\"] == r.id)\n            if(!f){\n                let n = {\n                    year: y,\n                    \"3_alpha_code\": r.id\n                }\n                $scope.params.indicators.forEach( d => {\n                    n[d.name] = null\n                })\n                \n                $scope.data.push(n)\n            }\n        })\n    })\n    \n    \n    \n    $scope.res = {\n        years: years,\n    \tlegend: $scope.params.regions.map( r => r.title),\n    \tyAxis: $scope.params.indicators.map( i => i.title),\n    \tseries: $scope.params.regions.map( r => ({\n    \t    name: r.title,\n    \t    type: $scope.params.type,\n    \t    itemStyle: {\n                opacity:0.8                   \n            },\n            areaStyle: {\n\t\t\t\topacity: 0.03\n\t\t\t},\n    \t    data: $scope.data.filter( d => d[\"3_alpha_code\"] == r.id).map( d => ({\n    \t        year: d.year,\n    \t        value: $scope.params.indicators.map( i => d[i.name])\n    \t    }))\n    \t}))\n    }\n\n?>\n\nreturn(\"res\")\n// return(\"p\")"},{"name":"GET_YEAR_SELECTOR","script":"\n\n<?html\n    <div class=\"caption px-2\">${content}</div>\n?>\nset(\"wrapper\")\n\n<?html\n    <a class=\"${font} ${color} px-2\" onClick = \"window.jaceApp.emit('${event}',null,{year:'${item}'})\"> ${item} </a>\n    \n?>\nset(\"item\")\n\n<?javascript\n    $scope.res = _.template( $scope.wrapper )({\n        content: $scope.params.list.map( item => _.template($scope.item)({\n            item,\n            event: $scope.params.event,\n            font: (item == $scope.params.selected) ? \"font-weight-bold\" : \"font-weight-light\",\n            color: (item == $scope.params.selected) ? \"primary--text\" : \"secondary--text\"\n        })).join(\"\\\\n\")\n    })\n?>\nreturn(\"res\")\nhtml()"},{"name":"GET_RADAR_SERIES","script":"\n\ndml.select(\n    from: <? \n        $scope.params.collection \n    ?>,\n    \n    where: <?\n        item => _.find( $scope.params.regions, d => d.id == item.value[\"3_alpha_code\"]) \n    ?>,\n    \n    map: <? \n        item => {\n            let res = {\n                \"3_alpha_code\": item.value[\"3_alpha_code\"],\n                year: item.value.year\n            }\n            $scope.params.indicators.forEach( d => {\n                res[d.name] = (item.value[d.column]) ? Number.parseFloat(item.value[d.column]).toFixed(3) : null\n            })\n            return res\n        }\n    ?>\n)\n\nc.order(by:\"year\")\nset(\"data\")\n\n<?javascript\n\n    let years = _.unique($scope.data.map( d => d.year))\n    \n    years.forEach(y => {\n        $scope.params.regions.forEach( r => {\n            let f = _.find($scope.data, d => d.year == y && d[\"3_alpha_code\"] == r.id)\n            if(!f){\n                let n = {\n                    year: y,\n                    \"3_alpha_code\": r.id\n                }\n                $scope.params.indicators.forEach( d => {\n                    n[d.name] = null\n                })\n                \n                $scope.data.push(n)\n            }\n        })\n    })\n    \n\n    \n    $scope.res = {\n        years: _.unique($scope.data.map( d => d.year)),\n    \tlegend: $scope.params.regions.map( r => r.title),\n\t    indicator: $scope.params.indicators.map( ind => ({\n\t        text: ind.title,\n\t        max: _.max(\n\t            $scope.data.map( d => d[ind.name])\n\t        )\n\t    })),\n\t    \n\t    series: [{\n\t        type: \"radar\",\n\t\t\ttooltip: {\n\t\t\t\ttrigger: \"item\"\n\t\t\t},\n\t\t\titemStyle: {},\n\t\t\tdata: $scope.params.regions.map( r => ({\n\t\t\t    areaStyle: {\n\t\t\t\t\t\tnormal: {\n\t\t\t\t\t\t\topacity: 0.1\n\t\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tname: r.title,\n\t\t\t\tvalue: _.unique($scope.data.map( d => d.year)).map( y => ({\n\t\t\t\t        year: y,\n\t\t\t\t        value: $scope.params.indicators.map( ind => _.find($scope.data, d => d.year == y && d[\"3_alpha_code\"] == r.id)[ind.name])\n\t\t\t\t})) \n\t\t\t\t\n\t\t\t}))\n\t    }]\n    }    \n\t    \n?>\n\nreturn(\"res\")"}],"data":{"source":"embedded","embedded":"<h2 color=\"#eee\"><center>not configured<center></h2><p>Use options dialog for configure this widget</p>","script":""},"id":"mbpqhw2h65","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"let mediator = this;\n\nlet scripts = mediator.api.selectWidgets(\"mbpqhw2h65\").$refs.instance.scripts\nlet getScript = name => {\n    return _.find(scripts, item => item.name == name).script\n}\n\nlet widgets = [\n    \"lineChart\", \n    \"barChart\", \n    \"radarChart\", \n    \"title\", \n    \"table\", \n    \"yearTitle\", \n    \"yearSelector\", \n    \"indicatorTitle\",\n    \"regionTitle\",\n    \"noDataAvailable\"\n]\n\nwidgets = widgets.map( w =>  [w,mediator.api.selectWidgets(d => d.config.name == w)])\nwidgets = widgets.concat([\n    [\"regionSelector\", mediator.api.selectWidgets(d => d.config.id == \"bhvufsg0ht8\")],\n    [\"indicatorSelector\", mediator.api.selectWidgets(d => d.config.id == \"llvdumkcglj\")]\n])\nwidgets = _.zipObject(widgets.map(w => w[0]), widgets.map(w => w[1]))\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nlet regionSelection = []\nlet indicatorSelection = []\nlet barSeries,radarSeries;\nlet yearSelection = \"\"\nconst metadataCollection = \"wdc-global-collections\"\nlet pageHash = \"#/1\"\nlet metadata;\n\nconst emptySerie = {\n\tlegend: [],\n\txAxis: [],\n\tseries: []\n}\n\nconst emptyTable = {\n    dataset:{\n        dimensions:[],\n        source:[]\n    }\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nlet hide = (...names) => {\n    names.forEach( n => {\n        if(widgets[n]) {\n            widgets[n].hide()\n        } else {\n            console.warn(`HIDE: widget \"${n}\" not found`)\n        }    \n    })\n}\n\nlet show = (...names) => {\n    names.forEach( n => {\n        if(widgets[n]) {\n            widgets[n].show()\n        } else {\n            console.warn(`Show: widget \"${n}\" not found`)\n        }\n    })\n}\n\nlet hideLineChartView = () => {\n    hide(\"lineChart\",\"table\",\"title\",\"noDataAvailable\")\n}\n\nlet hideBarChartView = () => {\n    hide(\"barChart\", \"table\", \"yearTitle\", \"yearSelector\", \"title\")\n}\n\nlet hideRadarChartView = () => {\n    hide(\"radarChart\", \"table\", \"yearTitle\", \"yearSelector\", \"title\")\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n    \nlet showBarChartView = () => {\n    hideRadarChartView()\n    hideLineChartView()\n    \n    show(\"yearTitle\", \"yearSelector\")\n    let params = getParams()\n    Promise.all(\n            params\n                .map( p => mediator.api.runDps(getScript(\"GET_BAR_SERIES\"), { params: _.extend(p,{type: \"bar\"}) })\n                .then(res => res.data))\n        ).then( res => {\n            barSeries = {\n                legend: res[0].legend,\n                years: res[0].years,\n                yAxis:_.flatten( res.map( d => d.yAxis)),\n                series: res[0].series.map( (s, index) => {\n                    s.data = s.data.map( d => {\n                        let val = d.value\n                        res.forEach( (r,ndx) => {\n                            \n                            val = val.concat(\n                                (ndx === 0) \n                                    ? []\n                                    : (_.find(r.series[index].data, m => m.year == d.year))?_.find(r.series[index].data, m => m.year == d.year).value : null\n                            )\n                        })\n                        return {\n                            year: d.year,\n                            value: val\n                        }\n                    })\n                    return s\n                })\n            }\n            \n            \n            widgets.yearSelector.update({\n                data:{\n                    items: barSeries.years,\n                    event: \"select-year-bar\"\n                }\n            })\n            \n            widgets.yearTitle.update({data: `\n                <div class=\"primary white--text title px-2\">\n                    Роки <span class=\"caption\">(${barSeries.years.length})</span>\n                </div>\n            `\n            })\n            \n            mediator.api.emit(\"select-year-bar\", barSeries.years[0])\n            \n            \n        })    \n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n    \nlet showRadarChartView = () => {\n    hideBarChartView()\n    hideLineChartView()\n    \n    show(\"yearTitle\", \"yearSelector\")\n    let params = getParams()\n    Promise.all(\n            params\n                .map( p => mediator.api.runDps(getScript(\"GET_RADAR_SERIES\"), { params: p} )\n                .then(res => res.data))\n        ).then( res => {\n            radarSeries = res[0]\n            radarSeries.indicator = _.flatten(res.map(r => r.indicator))\n            radarSeries.series[0].data = res[0].series[0].data.map( ( d, index ) => {\n                d.value = d.value.map( (v, ndx) => ({\n                    year: v.year,\n                    value: _.flatten(\n                        res.map( r => (r.series[0].data[index] ) \n                                    ? (r.series[0].data[index].value[ndx]) ? r.series[0].data[index].value[ndx].value : null\n                                    : null\n                        )            \n                    )\n                }))\n                return d\n            })\n            \n            widgets.yearSelector.update({\n                data:{\n                    items: radarSeries.years,\n                    event: \"select-year-radar\"\n                }\n            })\n           \n            widgets.yearTitle.update({data: `\n                <div class=\"primary white--text title px-2\">\n                    Роки <span class=\"caption\">(${radarSeries.years.length})</span>\n                </div>\n            `\n            })\n    \n            mediator.api.emit(\"select-year-radar\", radarSeries.years[0])\n\n        })\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n    \nlet showLineChartView = () => {\n    \n    // show(\"lineChart\",\"table\",\"title\")\n\n    widgets.lineChart.update({data: emptySerie})\n    widgets.table.update({data: emptyTable})\n\n\n    let params = getParams() \n    \n    if(params.length === 0) return\n    \n    widgets.title.update({\n        data: \n    \n    `<div class=\"secondary--text title font-weight-light px-2\">\n        <center>\n            Wait for    ${\n                            (regionSelection.length == 1) \n                            ? regionSelection.map(d => d.title).join(\",\") \n                            : indicatorSelection.map(d => d.title).join(\",\")\n                        }&nbsp;...\n        </center>\n    </div>\n    `\n    })\n    \n\n    if( indicatorSelection.length == 1 ){\n        mediator.api.runDps(getScript(\"GET_TABLE_FOR_IND\"), { params: params[0] }).then(res => {\n            widgets.table.update({data:res.data})\n        })\n        \n        mediator.api.runDps(getScript(\"GET_SERIES_FOR_IND\"), { params: params[0] }).then(res => {\n            res.data.legend = res.data.legend.map( l => _.find(regionSelection, r => r.id == l).title)\n            res.data.series = res.data.series.map( s => {\n                s.name = _.find(regionSelection, r => r.id == s.name).title\n                return s\n            })\n            \n            let noDataAvailable = []\n            res.data.series = res.data.series.filter( s => {\n                let t = _.without(s.data,null).length \n                if(t == 0) noDataAvailable.push(s.name)\n                return t > 0\n            })\n            res.data.legend = res.data.series.map( s => s.name)\n            \n            if(res.data.legend.length == 0){\n                hide(\"lineChart\")\n                show(\"title\")\n                widgets.title.update({\n                    data: ` <div class=\"warning--text title font-weight-light px-2\">\n                                <center>Дані для Вашого вибору відсутні</center>\n                            </div>`\n                })\n                return    \n            }\n            \n            if(noDataAvailable.length > 0){\n                widgets.noDataAvailable.show()\n                widgets.noDataAvailable.update({data:\n                    `<div class=\"body-2 warning--text px-3 mx-0\">\n                        <span class=\"font-weight-light\">Дані відсутні для </span>\n                        ${noDataAvailable.map( d => '<i class=\"mdi mdi-map-marker\"></i> '+d).join(\", \")}.\n                    </div>\n                    `\n                })\n            }\n            show(\"lineChart\",\"table\",\"title\")\n            widgets.lineChart.update({data:res.data})\n        })\n        \n        mediator.api.runDps(getScript(\"GET_INDICATOR_TITLE\"), { data: indicatorSelection[0].data})\n            .then( res => {\n                widgets.title.update({data: res.data})\n            })\n    } else {\n        Promise.all(\n            params\n                .map( p => mediator.api.runDps(getScript(\"GET_TABLE_FOR_REG\"), { params: p })\n                .then(res => res.data))\n        ).then( res => {\n            let data = {\n                dataset:{\n                    dimensions: res[0].dataset.dimensions,\n                    source: _.flatten(res.map( c => c.dataset.source))\n                }\n            }\n            widgets.table.update({data})\n        })\n\n        \n        Promise.all( \n            params\n                .map( p => mediator.api\n                    .runDps(getScript(\"GET_SERIES_FOR_REG\"),{params: p})\n                        .then( res => res.data)\n                )        \n        ).then( res => {\n            let data = {\n                legend: _.flatten(res.map( c => c.legend)),\n                xAxis: res[0].xAxis,\n                series: _.flatten(res.map( c => c.series))\n            }\n            \n            \n            let noDataAvailable = []\n            data.series = data.series.filter( s => {\n                let t = _.without(s.data,null).length \n                if(t == 0) noDataAvailable.push(s.name)\n                return t > 0\n            })\n            \n            data.legend = data.series.map( s => s.name)\n            \n            if(data.legend.length == 0){\n                hide(\"lineChart\")\n                show(\"title\")\n                widgets.title.update({\n                    data: ` <div class=\"warning--text title font-weight-light px-2\">\n                                <center>Дані для Вашого вибору відсутні</center>\n                            </div>`\n                })\n                return    \n            }\n            \n            if(noDataAvailable.length > 0){\n                widgets.noDataAvailable.show()\n                widgets.noDataAvailable.update({data:\n                    `<div class=\"body-2 warning--text px-3 mx-0\">\n                        <span class=\"font-weight-light\">Дані відсутні для </span>\n                        ${noDataAvailable.map( d => '<i class=\"mdi mdi-chart-bar\"></i> '+d).join(\", \")}.\n                    </div>\n                    `\n                })\n            }\n            \n            show(\"lineChart\",\"table\",\"title\")\n            widgets.lineChart.update({data})\n            widgets.title.update({\n                data: \n                `\n                    <div class=\"pa-0 ma-0\" style=\"border:1px solid #afafaf; background:white;\">\n                        <div class=\"px-4 mx-4 py-3 my-0\">\n                            <h2 class=\"primary--text subheading font-weight-light\">\n                                <i class=\"primary--text subheading mdi mdi-map-marker\"></i>                  \n                                    ${\n                                        (regionSelection.length == 1) \n                                        ? regionSelection.map(d => d.title).join(\",\") \n                                        : indicatorSelection.map(d => d.title).join(\",\")\n                                    }\n                            </h2>\n                            \n                        </div> \n                    </div>    \n                `\n            })\n        })\n    }\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////    \n    \nlet getParams = () => {\n    let params = indicatorSelection\n                    .map( i => metadata\n                    .filter( m => m.name == i.id)[0])\n                    .filter(p => p)\n    params = _.toPairs( \n        _.groupBy(\n            params.map( p => {\n                p.collection = (p.concept) ? p.concept.split(\".\")[0] : null\n                return p\n            }), \"collection\"\n        )\n    ).map(p =>({\n        collection: p[0],\n        indicators: p[1].map( d => ({\n            column: d.concept.split(\".\")[1],\n            name: d.name,\n            title: _.find(indicatorSelection, i => i.id == d.name).title\n        })),\n        regions: regionSelection\n    }))    \n    \n    return params        \n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n    \nlet pageUpdate = () => {\n    mediator.api.emit(\"stop-timer\")\n    hideLineChartView()    \n    hideBarChartView()    \n    hideRadarChartView()    \n    \n    if ( regionSelection.length === 0 || indicatorSelection.length === 0 ) {\n        show(\"title\")\n        widgets.title.update({\n            data: ` <div class=\"warning--text title font-weight-light px-2\">\n                        <center>Дані для Вашого вибору відсутні</center>\n                    </div>`\n        })\n        return\n    }\n\n    let params = getParams()\n    if(params.length === 0) return\n\n    if( indicatorSelection.length == 1 || regionSelection.length == 1 ){ \n        showLineChartView();\n        return\n    }\n    \n    if( indicatorSelection.length == 2 ){ \n        showBarChartView();\n        return\n    }\n    \n    showRadarChartView()\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nmediator.api.off()\n\nmediator.api.on({\n    event: \"start\",\n    callback: () => {\n        \n        if(window.location.hash != pageHash) return \n\n        Promise.all([\n            mediator.api.runDps(getScript(\"GET_METADATA\"), { metadataCollection }).then(res => { metadata = res.data}),\n            mediator.api.runDps(getScript(\"GET_REGIONS\")).then( res => { window._regions = res.data}),\n            mediator.api.runDps(getScript(\"GET_INDICATORS\")).then( res => { window._indicators = res.data})\n        ]).then( () => {\n        \n            widgets.regionTitle.update({data: `\n                <div class=\"primary white--text title px-2\">\n                    Країни <span class=\"caption\">(${window._regions.length})</span>\n                </div>\n            `\n            })\n            \n            widgets.indicatorTitle.update({data: `\n                <div class=\"primary white--text title px-2\">\n                    Індикатори <span class=\"caption\">(${window._indicators.length})</span>\n                </div>\n            `\n            })\n            widgets.indicatorSelector.update({data: window._indicators})\n            widgets.regionSelector.update({data: window._regions})    \n        })\n    },\n    rule: () => true\n})\n\nmediator.api.on({\n    event: \"data-select\",\n    callback: (emitter, data) => {\n            regionSelection = data.selection.filter( d => d.selected).map(d => d.entity)\n            pageUpdate()\n        },\n        rule: d => d.config.name == \"regions\"\n    })\n    \nmediator.api.on({\n    event: \"data-select\",\n    callback: (emitter, data) => {\n        indicatorSelection = data.selection.filter( d => d.selected).map(d => d.entity)\n        pageUpdate()\n    },\n    rule: d => d.config.name == \"indicators\"\n})\n\nmediator.api.on({\n    event:\"select-year-bar\",\n    callback:(emitter,data) => {\n        hide(\"radarChart\")\n        yearSelection = data\n\n        let chartData = {\n            legend: barSeries.legend,\n            yAxis: barSeries.yAxis,\n            series: barSeries.series.map(s => ({\n                name: s.name,\n                type: s.type,\n                itemStyle: s.itemStyle,\n                data: (_.find(s.data, v => v.year == yearSelection )) ? _.find(s.data, v => v.year == yearSelection ).value : null\n            })) \n        }        \n        \n        let noDataAvailable = []\n        \n        chartData.series = chartData.series.filter( v => {\n            let t = _.without(v.data,null).length \n            if(t == 0) noDataAvailable.push(v.name)\n            return t > 0\n        })\n        \n        chartData.legend = chartData.series.map(d => d.name)\n        \n        \n        if(chartData.legend.length == 0){\n            hide(\"barChart\",\"yearSelector\",\"yearTitle\")\n            show(\"title\")\n            widgets.title.update({\n                data: ` <div class=\"warning--text title font-weight-light px-2\">\n                            <center>Дані для Вашого вибору відсутні</center>\n                        </div>`\n            })\n            return\n        }\n\n        if(noDataAvailable.length > 0){\n            widgets.noDataAvailable.show()\n            widgets.noDataAvailable.update({data:\n                `<div class=\"body-2 warning--text px-3 mx-0\">\n                    <span class=\"font-weight-light\">Дані відсутні для </span>\n                    ${noDataAvailable.map( d => '<i class=\"mdi mdi-map-marker\"></i> '+d).join(\", \")}.\n                </div>\n                `\n            })\n        }\n        \n        show(\"barChart\")\n            \n        widgets.barChart.update({data: chartData})        \n    \n    },\n    rule: () => true\n})\n\nmediator.api.on({\n    event:\"select-year-radar\",\n    callback:(emitter,data) => {\n        yearSelection = data\n        hide(\"barChart\")\n        if(!yearSelection){\n            hide(\"radarChart\",\"yearSelector\",\"yearTitle\")\n            show(\"title\")\n            widgets.title.update({\n                data: ` <div class=\"warning--text title font-weight-light px-2\">\n                            <center>Дані для Вашого вибору відсутні</center>\n                        </div>`\n            })\n            return\n        } \n    \n        let s = [\n            {\n                \"type\": \"radar\",\n    \t\t\t\"tooltip\": {\n    \t\t\t\t\"trigger\": \"item\"\n    \t\t\t},\n    \t\t\t\"itemStyle\": {},\n    \t\t\t\"data\": radarSeries.series[0].data.map( d => ({\n                    name: d.name.replace(\"'\",\"\"),\n                    areaStyle:d.areaStyle,\n                    value: _.find(d.value, v => v.year == yearSelection).value \n                }))\n            }\n        ]\n        \n        let noDataAvailable = []\n            s[0].data = s[0].data.filter( v => {\n                \n                let t = _.without(v.value,null).length \n                if(t == 0) noDataAvailable.push(v.name)\n                return t > 0\n            })\n\n            \n        if(noDataAvailable.length > 0){\n            widgets.noDataAvailable.show()\n            widgets.noDataAvailable.update({data:\n                `<div class=\"body-2 warning--text px-3 mx-0\">\n                    <span class=\"font-weight-light\">Дані відсутні для </span>\n                    ${noDataAvailable.map( d => '<i class=\"mdi mdi-map-marker\"></i> '+d).join(\", \")}.\n                </div>\n                `\n            })\n        }\n    \n        \n        let chartData = {\n            legend: s[0].data.map( d => d.name),\n            indicator: radarSeries.indicator.map( i => ({\n                text: i.text.replace(\"'\",\"\"),\n                max: i.max\n            })),\n            type: \"radar\",\n            series: s\n        }        \n        show(\"radarChart\")\n        // mediator.$nextTick(()=>{\n            widgets.radarChart.update({data: chartData})        \n        // })\n    \n    },\n    rule: () => true\n})\n    \n\n\n"},"id":"mjbgvvy9gw","activated":false},{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"\n<div \n>\n    \n    <center>\n    <div class=\"display-2 primary--text my-0 pa-5\">\n        <!--<center>-->\n            Індикатори сталого розвитку   \n        <!--</center>-->\n    </div>\n    </center>\n</div>\n","script":""},"id":"9ghxhcydvr","activated":false},{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"\n<div \n>\n    \n    <center>\n    <div class=\"display-1 primary--text my-0 pa-5\">\n        <!--<center>-->\n            Часові ряди   \n        <!--</center>-->\n    </div>\n    </center>\n</div>\n","script":""},"id":"89slmzh94kc","activated":false},{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<p class=\"secondary--text body-1 font-weight-light\" style=\"text-align:justify; line-height:1.1em\">\n</p>\n<div class=\"my-5\">\n    \n</div>","script":""},"id":"msorbuz70ol","activated":false}]},"vqlies8ti6":{"widgets":[{"type":"html-widget","name":"regionTitle","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary white--text title px-2\">\n    Регіони\n</div>","script":""},"id":"ukmlrwo9698","activated":false},{"type":"data-selector-widget","name":"regions","icon":"mdi-format-list-checks","options":{"widget":{"visible":true,"multiple":true,"label":"Select Entities"},"mapper":{"id":"3_alpha_code","title":"name"}},"data":{"source":"embedded","embedded":[],"script":"dml.select(from:\"regions\", return:\"value\")\nset(\"regions\")\n// dml.select(from:\"sdi-wbsf\", return:\"value\")\n// c.unique(\"3_alpha_code\")\nc.order(\"region_name_uk\")\n// c.innerJoin(with:{{countries}}, on: <? (a,b) => a == b[\"3_alpha_code\"] ?>)\nc.map(<? \n    d => ({\n        title: d.region_name_en,\n        id: d.hasc_code\n    })\n?>)"},"id":"bhvufsg0ht8","activated":false},{"type":"html-widget","name":"indicatorTitle","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary white--text title px-2\">\n    Індикатори\n</div>","script":""},"id":"1cq3xtwggjt","activated":false},{"type":"data-selector-widget","name":"indicators","icon":"mdi-format-list-checks","options":{"widget":{"visible":true,"multiple":true,"label":"Select Entities"},"mapper":{"id":"3_alpha_code","title":"name"}},"data":{"source":"embedded","embedded":[],"script":"dml.select(from:\"wdc-regional-concepts-2016\", return:\"value\")\n// set(\"concepts\")\n// dml.select(from:\"sdi-wbsf\", return:\"value\")\n// c.unique(\"3_alpha_code\")\nc.order(\"name\")\n// c.innerJoin(with:{{countries}}, on: <? (a,b) => a == b[\"3_alpha_code\"] ?>)\nc.map(<? \n    d => ({\n        title: d.name,\n        id: d.concept,\n        data: d\n    })\n?>)"},"id":"llvdumkcglj","title":"Select indicators","activated":false}]},"5uhfv5ieju3":{"widgets":[{"type":"html-widget","name":"yearTitle","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary white--text title px-2\">\n    Рік\n</div>","script":""},"id":"4d7uz2vpe5g","activated":false},{"type":"data-legend-widget","name":"yearSelector","icon":"mdi-loop","options":{"widget":{"visible":true,"multiple":true,"label":"Items"},"mapper":{"id":"3_alpha_code","title":"name"}},"data":{"source":"embedded","embedded":{"event":"data-select","items":[]},"script":""},"id":"m7xc82krsqm","activated":false},{"type":"html-widget","name":"title","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div style=\"height:48px;\">\n    \n</div>","script":""},"id":"gpbl5vg4tai","activated":false},{"type":"html-widget","name":"noDataAvailable","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"ro5zruebl8d","activated":false},{"type":"line-chart-widget","name":"lineChart","icon":"mdi-chart-line","options":{"widget":{"visible":true,"height":"350"},"tooltip":{"trigger":"axis","axisPointer":{"type":"cross","label":{"backgroundColor":"#6a7985"}}},"legend":{"data":["1","2"]},"xAxis":{"type":"category","data":["2015","2016","2017","2018"]},"yAxis":{"type":"value"},"series":[{"name":"1","type":"line","data":[43.3,85.8,93.7,79.4],"smooth":true},{"name":"2","type":"line","data":[37.3,28.8,77.7,100],"smooth":true}],"color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],"palette":{"id":"Dark2_8","color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"]}},"data":{"source":"embedded","embedded":{"legend":[],"xAxis":[],"series":[]},"script":""},"id":"u822hmrgxd","activated":false},{"type":"bar-chart-widget","name":"barChart","icon":"mdi-chart-bar","options":{"widget":{"visible":true,"height":"350"},"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{"data":["Serie1","Serie2"]},"grid":{"left":"3%","right":"4%","bottom":"3%","containLabel":true},"xAxis":{"type":"value","boundaryGap":[0,0.01]},"yAxis":{"type":"category","data":["o1","o2","o3","o4","o5","o6"]},"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}],"color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],"palette":{"id":"Dark2_8","color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"]}},"data":{"source":"embedded","embedded":{"legend":[],"yAxis":[],"series":[]},"script":""},"id":"2uzgj2s75rg","activated":false},{"type":"radar-chart-widget","name":"radarChart","icon":"mdi-chart-line","options":{"widget":{"visible":true,"height":"550"},"tooltip":{"trigger":"axis"},"legend":{"x":"center","data":["Entity 1","Entity 2","Entity 3"],"padding":[5,30]},"radar":[{"indicator":[{"text":"C1","max":100},{"text":"C2","max":100},{"text":"C3","max":100},{"text":"C4","max":100},{"text":"C5","max":100}],"radius":"80%","center":["50%","50%"],"name":{"nameGap":5},"shape":"circle"}],"series":[{"type":"radar","tooltip":{"trigger":"item"},"itemStyle":{},"data":[{"value":[85,90,90,95,95],"areaStyle":{"normal":{"opacity":0.1}},"name":"Entity 1"},{"value":[95,80,95,90,93],"areaStyle":{"normal":{"opacity":0.2}},"name":"Entity 2"},{"value":[25,30,45,50,22],"areaStyle":{"normal":{"opacity":0.1}},"name":"Entity 3"}]}],"color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],"palette":{"id":"Dark2_8","color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"]}},"data":{"source":"embedded","embedded":{"legend":[],"indicator":[],"series":[]},"script":""},"id":"5b7ikjpqk3v","activated":false},{"type":"data-table-widget","name":"table","icon":"mdi-grid","options":{"widget":{"visible":true},"headerTextOrientation":"horizontal","dense":true,"fixedHeader":false,"pagination":false,"typography":"caption","textColor":"default","textBackground":"default","useColors":false,"palette":{"id":"YlGn_4","color":["#ffffcc","#c2e699","#78c679","#238443"]},"colorMode":"row"},"data":{"source":"embedded","embedded":{"dataset":{"dimensions":[],"source":[]}},"script":""},"id":"je24q806389","activated":false}]}},"id":"1","title":"1","url":"https://jace-dev.herokuapp.com/design/WDC-Global-Time-Series#/1"}],"name":"WDC-Global-Time-Series","i18n":{"en":{},"uk":{}},"icon":"./img/djvue.png","skin":{"holders":{"AppHeader":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div style=\"padding:3em 0;\" class=\"primary white--text subheading\">\n    <center>\n        This app skin contains two static holders. This is \"AppHeader.\"    \n    </center>\n</div>\n","script":""},"id":"w5vd074og0p","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"this.api.emit(\"start\")\n"},"id":"3lcf7xur63i","activated":false}]},"AppFooter":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div style=\"padding:3em 0;\" class=\"primary white--text subheading\">\n    <center>\n        This app skin contains two static holders. This is \"AppFooter.\"    \n    </center>\n</div>","script":""},"id":"361f70vcsjf","activated":false}]}}},"dpsURL":"https://jace-dps.herokuapp.com","theme":{"primary":"#0065a4","secondary":"#37474F","accent":"#8E24AA","error":"#f44336","info":"#0091EA","success":"#388E3C","warning":"#E65100"},"importedFromURL":"http://jace-dev.herokuapp.com/app/WDC-Global-Time-Series","importedFromAuthor":"Andrey Boldak"}