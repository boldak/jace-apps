{"title":"ElasticSearch","description":"How to use ElasticSearch in your Jace applications ","keywords":[],"isPublished":true,"pages":[{"layout":"flex","sections":[{"align":"justify-center","holders":[{"name":"default","width":10}]},{"align":"justify-center","holders":[{"name":"urugy3u19y","width":8}]},{"align":"justify-center","holders":[{"name":"08e1i2tt9fbd","width":8}]}],"holders":{"default":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<h2 class=\"primary--text display-3 font-weight-light mb-4 pb-4\">\r\n      <center>About ElasticSearch</center>\r\n</h2>\r\n\r\n<p class=\"font-weight-light\">Elasticsearch is the distributed search and analytics engine at the heart of\r\nthe Elastic Stack. Logstash and Beats facilitate collecting, aggregating, and\r\nenriching your data and storing it in Elasticsearch. Kibana enables you to\r\ninteractively explore, visualize, and share insights into your data and manage\r\nand monitor the stack. Elasticsearch is where the indexing, search, and analysis\r\nmagic happen.</p>\r\n<p class=\"font-weight-light\">Elasticsearch provides real-time search and analytics for all types of data. Whether you\r\nhave structured or unstructured text, numerical data, or geospatial data,\r\nElasticsearch can efficiently store and index it in a way that supports fast searches.\r\nYou can go far beyond simple data retrieval and aggregate information to discover\r\ntrends and patterns in your data. And as your data and query volume grows, the\r\ndistributed nature of Elasticsearch enables your deployment to grow seamlessly right\r\nalong with it.</p>\r\n","script":""},"id":"8opo3xvyyof","activated":false}]},"urugy3u19y":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<h2 class=\"headline primary--text my-2\">\r\n    What is Elasticsearch used for?\r\n</h2>\r\n<p class=\"font-weight-light\">The speed and scalability of Elasticsearch and its ability to index many \r\ntypes of content mean that it can be used for a number of use cases:\r\n</p>\r\n<div class=\"mx-0 px-3\">\r\n    <ul class=\"font-weight-light\">\r\n        <li>Application search</li>\r\n        <li>Website search</li>\r\n        <li>Enterprise search</li>\r\n        <li>Logging and log analytics</li>\r\n        <li>Infrastructure metrics and container monitoring</li>\r\n        <li>Application performance monitoring</li>\r\n        <li>Geospatial data analysis and visualization</li>\r\n        <li>Security analytics</li>\r\n        <li>Business analytics</li>\r\n    </ul>\r\n    \r\n</div>\r\n\r\n<h2 class=\"headline primary--text my-2\">\r\n            How does Elasticsearch work?\r\n        </h2>\r\n    <p class=\"font-weight-light\">\r\n        Raw data flows into Elasticsearch from a variety of sources, including logs, \r\n    system metrics, and web applications. \r\n    <em>Data ingestion</em> is the process by which this raw data is parsed, normalized, and enriched before it \r\n    is <em>indexed</em> in Elasticsearch. \r\n    Once indexed in Elasticsearch, users can run complex queries against their data and use aggregations \r\n    to retrieve complex summaries of their data. From Kibana, users can create powerful visualizations of \r\n    their data, share dashboards, and manage the Elastic Stack.\r\n    </p>\r\n\r\n<h2 class=\"headline primary--text my-2\">\r\nWhy use Elasticsearch?\r\n</h2>\r\n\r\n    <p class=\"font-weight-light\"><strong>Elasticsearch is fast.</strong> Because Elasticsearch is built on top of Lucene, it excels at full-text \r\n    search. Elasticsearch is also a near real-time search platform, meaning the latency \r\n    from the time a document is indexed until it becomes searchable is very short — typically one second. \r\n    As a result, Elasticsearch is well suited for time-sensitive use \r\n    cases such as security analytics and infrastructure monitoring.\r\n</p>\r\n<p class=\"font-weight-light\"><strong>Elasticsearch is distributed by nature.</strong> The documents stored in \r\nElasticsearch are distributed across different containers known as <em>shards</em>, which are duplicated to \r\nprovide redundant copies of the data in case of hardware failure. The distributed nature of Elasticsearch allows it to \r\nscale out to hundreds (or even thousands) of servers and handle petabytes of data.\r\n</p>\r\n<p class=\"font-weight-light\"><strong>Elasticsearch comes with a wide set of features.</strong> In addition to its speed, \r\nscalability, and resiliency, Elasticsearch has a number of powerful built-in features that make \r\nstoring and searching data even more efficient, such as data rollups and index lifecycle management.\r\n</p>\r\n<p class=\"font-weight-light\"><strong>The Elastic Stack simplifies data ingest, visualization, and reporting.</strong> Integration with Beats and Logstash \r\nmakes it easy to process data before indexing into Elasticsearch. And Kibana provides real-time visualization of \r\nElasticsearch data as well as UIs for quickly accessing application performance monitoring (APM), logs, and \r\ninfrastructure metrics data.\r\n</p>","script":""},"id":"ofkh68ref7","activated":false},{"type":"html-widget","name":"noname_clone_o3721kbk11","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<h2 class=\"primary--text display-2 font-weight-light ma-4 pb-4\">\r\n      <center>Data in: documents and indices</center>\r\n</h2>","script":""},"id":"o3721kbk11","activated":false},{"type":"html-widget","name":"noname_clone_o3721kbk11_clone_3bg0ff8ve2h_clone_2wnst959t4w","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"\r\n<p class=\"font-weight-light\">Elasticsearch is a distributed document store. Instead of storing information as rows of\r\ncolumnar data, Elasticsearch stores complex data structures that have been serialized\r\nas JSON documents. When you have multiple Elasticsearch nodes in a cluster, stored\r\ndocuments are distributed across the cluster and can be accessed immediately\r\nfrom any node.</p>\r\n<p class=\"font-weight-light\">When a document is stored, it is indexed and fully searchable in near\r\nreal-time— within 1 second. Elasticsearch uses a data structure called an\r\ninverted index that supports very fast full-text searches. An inverted index\r\nlists every unique word that appears in any document and identifies all of the\r\ndocuments each word occurs in.</p>\r\n<p class=\"font-weight-light\">An index can be thought of as an optimized collection of documents and each\r\ndocument is a collection of fields, which are the key-value pairs that contain\r\nyour data. By default, Elasticsearch indexes all data in every field and each indexed\r\nfield has a dedicated, optimized data structure. For example, text fields are\r\nstored in inverted indices, and numeric and geo fields are stored in BKD trees.\r\nThe ability to use the per-field data structures to assemble and return search\r\nresults is what makes Elasticsearch so fast.</p>\r\n<p class=\"font-weight-light\">Elasticsearch also has the ability to be schema-less, which means that documents can be\r\nindexed without explicitly specifying how to handle each of the different fields\r\nthat might occur in a document. When dynamic mapping is enabled, Elasticsearch\r\nautomatically detects and adds new fields to the index. This default\r\nbehavior makes it easy to index and explore your data — just start\r\nindexing documents and Elasticsearch will detect and map booleans, floating point and\r\ninteger values, dates, and strings to the appropriate Elasticsearch datatypes.</p>\r\n<p class=\"font-weight-light\">Ultimately, however, you know more about your data and how you want to use it\r\nthan Elasticsearch can. You can define rules to control dynamic mapping and explicitly\r\ndefine mappings to take full control of how fields are stored and indexed.</p>\r\n<p class=\"font-weight-light\">Defining your own mappings enables you to:</p>\r\n<div class=\"mx-0 px-3 mb-2\">\r\n    <ul class=\"font-weight-light\">\r\n<li class=\"listitem\">\r\nDistinguish between full-text string fields and exact value string fields\r\n</li>\r\n<li class=\"listitem\">\r\nPerform language-specific text analysis\r\n</li>\r\n<li class=\"listitem\">\r\nOptimize fields for partial matching\r\n</li>\r\n<li class=\"listitem\">\r\nUse custom date formats\r\n</li>\r\n<li class=\"listitem\">\r\nUse data types such as <code class=\"literal\">geo_point</code> and <code class=\"literal\">geo_shape</code> that cannot be automatically\r\ndetected\r\n</li>\r\n</ul>\r\n</div>\r\n<p class=\"font-weight-light\">It’s often useful to index the same field in different ways for different\r\npurposes. For example, you might want to index a string field as both a text\r\nfield for full-text search and as a keyword field for sorting or aggregating\r\nyour data. Or, you might choose to use more than one language analyzer to\r\nprocess the contents of a string field that contains user input.</p>\r\n<p class=\"font-weight-light\">The analysis chain that is applied to a full-text field during indexing is also\r\nused at search time. When you query a full-text field, the query text undergoes\r\nthe same analysis before the terms are looked up in the index.</p>\r\n","script":""},"id":"2wnst959t4w","activated":false},{"type":"html-widget","name":"noname_clone_o3721kbk11_clone_hg8175rcw8t","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<h2 class=\"primary--text display-2 font-weight-light ma-4 pb-4\">\r\n      <center>Information out: search and analyze</center>\r\n</h2>","script":""},"id":"hg8175rcw8t","activated":false},{"type":"html-widget","name":"noname_clone_o3721kbk11_clone_3bg0ff8ve2h_clone_2wnst959t4w_clone_xa95wyeoqu","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<p class=\"font-weight-light\">While you can use Elasticsearch as a document store and retrieve documents and their\r\nmetadata, the real power comes from being able to easily access the full suite\r\nof search capabilities built on the Apache Lucene search engine library.</p>\r\n<p class=\"font-weight-light\">Elasticsearch provides a simple, coherent REST API for managing your cluster and indexing\r\nand searching your data.  For testing purposes, you can easily submit requests\r\ndirectly from the command line or through the Developer Console in Kibana. From\r\nyour applications, you can use the\r\n<a href=\"/guide/en/elasticsearch/client/index.html\" class=\"ulink\" target=\"_top\">Elasticsearch client</a>\r\nfor your language of choice: Java, JavaScript, Go, .NET, PHP, Perl, Python\r\nor Ruby.</p>\r\n<h2 class=\"headline primary--text my-2\">\r\n    Searching your data\r\n</h2>\r\n<p class=\"font-weight-light\">The Elasticsearch REST APIs support structured queries, full text queries, and complex\r\nqueries that combine the two. Structured queries are\r\nsimilar to the types of queries you can construct in SQL. For example, you\r\ncould search the <code class=\"literal\">gender</code> and <code class=\"literal\">age</code> fields in your <code class=\"literal\">employee</code> index and sort the\r\nmatches by the <code class=\"literal\">hire_date</code> field. Full-text queries find all documents that\r\nmatch the query string and return them sorted by <em>relevance</em>—how good a\r\nmatch they are for your search terms.</p>\r\n<p class=\"font-weight-light\">In addition to searching for individual terms, you can perform phrase searches,\r\nsimilarity searches, and prefix searches, and get autocomplete suggestions.</p>\r\n<p class=\"font-weight-light\">Have geospatial or other numerical data that you want to search? Elasticsearch indexes\r\nnon-textual data in optimized data structures that support\r\nhigh-performance geo and numerical queries.</p>\r\n<p class=\"font-weight-light\">You can access all of these search capabilities using Elasticsearch’s\r\ncomprehensive JSON-style query language (<a class=\"xref\" href=\"query-dsl.html\" title=\"Query DSL\">Query DSL</a>). You can also\r\nconstruct <a class=\"xref\" href=\"sql-overview.html\" title=\"Overview\">SQL-style queries</a> to search and aggregate data\r\nnatively inside Elasticsearch, and JDBC and ODBC drivers enable a broad range of\r\nthird-party applications to interact with Elasticsearch via SQL.</p>\r\n<h2 class=\"headline primary--text my-2\">\r\n    Analyzing your data\r\n</h2>\r\n<p class=\"font-weight-light\">Elasticsearch aggregations enable you to build complex summaries of your data and gain\r\ninsight into key metrics, patterns, and trends. Instead of just finding the\r\nproverbial “needle in a haystack”, aggregations enable you to answer questions\r\nlike:</p>\r\n<div class=\"mx-0 px-3 mb-2\">\r\n    <ul class=\"font-weight-light\">\r\n<li class=\"listitem\">\r\nHow many needles are in the haystack?\r\n</li>\r\n<li class=\"listitem\">\r\nWhat is the average length of the needles?\r\n</li>\r\n<li class=\"listitem\">\r\nWhat is the median length of the needles, broken down by manufacturer?\r\n</li>\r\n<li class=\"listitem\">\r\nHow many needles were added to the haystack in each of the last six months?\r\n</li>\r\n</ul>\r\n</div>\r\n<p class=\"font-weight-light\">You can also use aggregations to answer more subtle questions, such as:</p>\r\n<div class=\"mx-0 px-3 mb-2\">\r\n    <ul class=\"font-weight-light\">\r\n<li class=\"listitem\">\r\nWhat are your most popular needle manufacturers?\r\n</li>\r\n<li class=\"listitem\">\r\nAre there any unusual or anomalous clumps of needles?\r\n</li>\r\n</ul>\r\n</div>\r\n<p class=\"font-weight-light\">Because aggregations leverage the same data-structures used for search, they are\r\nalso very fast. This enables you to analyze and visualize your data in real time.\r\nYour reports and dashboards update as your data changes so you can take action\r\nbased on the latest information.</p>\r\n<p class=\"font-weight-light\">What’s more, aggregations operate alongside search requests. You can search\r\ndocuments, filter results, and perform analytics at the same time, on the same\r\ndata, in a single request. And because aggregations are calculated in the\r\ncontext of a particular search, you’re not just displaying a count of all\r\nsize 70 needles, you’re displaying a count of the size 70 needles\r\nthat match your users' search criteria — for example, all size 70 <em>non-stick\r\nembroidery</em> needles.</p>\r\n<h2 class=\"headline primary--text my-2\">\r\n    But wait, there’s more\r\n</h2>\r\n<p class=\"font-weight-light\">Want to automate the analysis of your time-series data? You can use\r\n<a href=\"/guide/en/machine-learning/7.6/ml-overview.html\" class=\"ulink\" target=\"_top\">machine learning</a> features to create accurate\r\nbaselines of normal behavior in your data and identify anomalous patterns. With\r\nmachine learning, you can detect:</p>\r\n<div class=\"mx-0 px-3 mb-2\">\r\n    <ul class=\"font-weight-light\">\r\n<li class=\"listitem\">\r\nAnomalies related to temporal deviations in values, counts, or frequencies\r\n</li>\r\n<li class=\"listitem\">\r\nStatistical rarity\r\n</li>\r\n<li class=\"listitem\">\r\nUnusual behaviors for a member of a population\r\n</li>\r\n</ul>\r\n</div>\r\n<p class=\"font-weight-light\">And the best part? You can do this without having to specify algorithms, models,\r\nor other data science-related configurations.</p>\r\n","script":""},"id":"xa95wyeoqu","activated":false}]},"08e1i2tt9fbd":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<a href=\"https://www.elastic.co/\" target=\"_blank\">\n    <center>\n<div>\n    <img style=\"width:64px\" src=\"https://cdn.iconscout.com/icon/free/png-512/elasticsearch-226094.png\">\n    \n</div>\n<div \n        class=\"primary--text display-1 font-weight-light\"\n>\n    More about ElasticSearch here\n</div>\n</center>\n</a>","script":""},"id":"gayrai5uy8f","activated":false}]}},"title":"Elasticsearch","url":"https://jace-dev.herokuapp.com/design/ElasticSearch#/"},{"layout":"flex","sections":[{"align":"justify-center","holders":[{"name":"default","width":11}]},{"align":"justify-center","holders":[{"name":"lapnr0gde3","width":11}]},{"align":"justify-center","holders":[{"name":"2vwvz46hqxg","width":11}]},{"align":"justify-center","holders":[{"name":"auc2fg14map","width":8}]},{"align":"justify-center","holders":[{"name":"r0w2t1d92lk","width":11}]},{"align":"justify-center","holders":[{"name":"vi9l9nacss","width":2},{"name":"gvkmxvq5shd","width":2},{"name":"6d3eeyidnan","width":2},{"name":"1u77mw4xbau","width":2}]},{"align":"justify-center","holders":[{"name":"wofhicigx3h","width":11}]},{"align":"justify-center","holders":[{"name":"o1hu8n8317q","width":2},{"name":"prroix9g39s","width":9}]}],"holders":{"default":{"widgets":[{"type":"mediator-widget","name":"noname_clone_xvrm4xxoop","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"    \n    let mediator = this;\n    let scripts = mediator.api.selectWidgets(\"s05upyxsum\").$refs.instance.scripts\n    let getScript = name => _.find(scripts,item => item.name == name).script\n    \n    let indexSelector = mediator.api.selectWidgets( d => d.config.name ==\"indexSelector\")\n    // let fieldSelector = mediator.api.selectWidgets( d => d.config.name ==\"fieldSelector\")\n    let table = mediator.api.selectWidgets( d => d.config.name ==\"indexData\")\n    // let indexInfo = mediator.api.selectWidgets( d => d.config.name ==\"indexInfo\")\n    let clusterInfo = mediator.api.selectWidgets( d => d.config.name ==\"clusterInfo\")\n    \n    // let indexInfoHeader = mediator.api.selectWidgets( d => d.config.name ==\"indexInfoHeader\")\n    // let clusterInfoHeader = mediator.api.selectWidgets( d => d.config.name ==\"clusterInfoHeader\")   \n    let indexDataHeader = mediator.api.selectWidgets( d => d.config.name ==\"indexDataHeader\")\n    // let mappings = mediator.api.selectWidgets( d => d.config.name ==\"mappings\")\n    // let mappingsHeader = mediator.api.selectWidgets( d => d.config.name ==\"mappingsHeader\")\n    // let tree = mediator.api.selectWidgets( d => d.config.name ==\"tree\")\n    \n    // let test = mediator.api.selectWidgets( d => d.config.name ==\"test\")\n    \n    let selectedProgress = mediator.api.selectWidgets( d => d.config.name ==\"selectedProgress\")\n    \n    let querySettings = mediator.api.selectWidgets( d => d.config.name ==\"querySettings\")\n    \n    let health = mediator.api.selectWidgets( d => d.config.name ==\"health\")\n    let documents = mediator.api.selectWidgets( d => d.config.name ==\"documents\")\n    let deleted = mediator.api.selectWidgets( d => d.config.name ==\"deleted\")\n    let storage = mediator.api.selectWidgets( d => d.config.name ==\"storage\")\n    \n    let index_name = mediator.api.selectWidgets( d => d.config.name ==\"index_name\")\n    \n    mediator.hideIndicators = () => {\n        health.hide()\n        documents.hide()\n        deleted.hide()\n        storage.hide()\n        index_name.hide()\n    }\n    mediator.showIndicators = () => {\n        health.show()\n        documents.show()\n        deleted.show()\n        storage.show()\n        index_name.show()\n    }\n    \n    mediator.updateIndicators = data => {\n       \n        health.update({data: data.health})\n        documents.update({data: data.documents})\n        deleted.update({data: data.deleted})\n        storage.update({data: data.storage})\n        \n    }\n    \n    \n    mediator.off(\"start-page-script\")\n    mediator.off(\"init-page-state\")\n    mediator.off(\"apply\")\n    \n    \n    mediator.querySettings = {\n    \t\"field\": {\n    \t\t\"columns\": {\n    \t\t\t\"type\": \"select\",\n    \t\t\t\"label\": \"Table Columns\",\n    \t\t\t\"multiple\": true,\n    \t\t\t\"items\": [],\n    \t\t\t\"itemText\": \"label\",\n    \t\t\t\"value\": []\n    \t\t},\n    \t\t\"rows\": {\n    \t\t\t\"type\": \"number\",\n    \t\t\t\"label\": \"Rows Limit\",\n    \t\t\t\"value\": 10\n    \t\t},\n    \t\t\"useFilter\": {\n    \t\t\t\"type\": \"switch\",\n    \t\t\t\"value\": false,\n    \t\t\t\"label\": \"Use Filter\"\n    \t\t},\n    \t\t\"query\": {\n    \t\t\t\"type\": \"textarea\",\n    \t\t\t\"label\": \"Query\",\n    \t\t\t\"show\": [\n    \t\t\t\t\"useFilter\"\n    \t\t\t]\n    \t\t}\n    \t}\n    }\n    \n    mediator.clearQuerySettings = () => {\n         mediator.querySettings.field.useFilter.value = false;\n         mediator.querySettings.field.columns.value = []\n         mediator.querySettings.field.columns.items = []\n         mediator.querySettings.field.query.value = \"\"\n         mediator.querySettings.field.rows.value = 10\n         \n    }\n    \n    \n    \n    \n    let initPage = () => {\n        indexSelector.hide()\n        // fieldSelector.hide()\n        table.hide()\n        // indexInfo.hide()\n        clusterInfo.hide()\n        \n        // indexInfoHeader.hide()\n        // clusterInfoHeader.hide()   \n        indexDataHeader.hide()\n        // mappings.hide()\n        // mappingsHeader.hide()\n        // tree.hide()\n        querySettings.hide()\n        selectedProgress.hide()\n        mediator.hideIndicators()\n    }\n    \n    mediator.updateTable = data => {\n       \n        if(!data) return\n       \n        let res = {\n        \t\"dataset\": {\n        \t\t\"dimensions\": [],\n        \t\t\"source\": []\n        \t}\n        }\t\n        if(mediator.querySettings.field.columns.value.length == 0){\n            res.dataset.dimensions = [\"raw data\"]\n            res.dataset.source = data.dataset.source.map( d => ({\"raw data\":JSON.stringify(d,null,\" \")}))\n            table.update({data:res})\n        } else {\n            res.dataset.dimensions = mediator.querySettings.field.columns.value\n            res.dataset.source = data.dataset.source\n            table.update({data:res})\n        }\n        \n        let percents = parseFloat( (100*res.dataset.source.length/data.total ).toFixed(0))\n        selectedProgress.show()\n        // if( percents > 0 ){\n            selectedProgress.update({data:`\n                <div style=\"width: 100%;\">\n                    <div class=\"primary--text caption text-xs-center pb-1 \">${res.dataset.source.length} from ${data.total}</div>\n                    <div class=\"mb-2\" style=\"border:1px solid #dedede;\">\n                        <div class=\"success darken-1 white--text px-1 body-1 font-weight-light text-xs-center\" style=\"width:${percents}%;height: 0.3em;\"></div>\n                    </div>   \n                </div>\n            `})    \n        // } else {\n        //     selectedProgress.update({data:`\n        //         <div></div>   \n        //     `})\n        // }\n        \n    \n    }\n    \n    let renderPage = service => {\n        \n        initPage()\n           \n            \n        \n        let p = mediator.api.progress({\n            text:`connect to elasticsearch on ${window.esUrl}`, \n            maxStage:5, \n            title:\"Connect to elasticsearch service\"\n        })\n        \n        mediator.api.runDps(getScript(\"ping\"),{service})\n        .then( response => {\n            if( response.data == true ){\n                p.set({text:\"get service info\"})\n                Promise.all([\n                mediator.api.runDps(getScript(\"cluster_info\"),{service})\n                      .then( response => {\n                            clusterInfo.show()\n                            // clusterInfoHeader.show()\n                            clusterInfo.update({data:response.data}) \n                            p.set({text:\"get cluster info\"}) \n                      }),   \n                \n                mediator.api.runDps(getScript(\"get_index_list\"),{service})\n                      .then( response => {\n                            indexSelector.show()\n                            indexSelector.update({data:response.data})   \n                            p.set({text:\"get index list\"})\n                    \n                      })   \n                ]).then(()=>{\n                    p.set({text:`you are connected to elasticsearch on ${window.esUrl || \"Default Elasticsearch service\"}`})\n                    setTimeout(() => {\n                       p.cancel() \n                    },3000)\n                })\n                \n                let selectedFields = []\n                var indexData;\n            \n                \n            \n                mediator.api.off(\"data-select\")\n        \n                mediator.api.on({\n                    event: \"data-select\",\n                    callback:(emitter,data) => {\n                        let t = data.selection.filter(d => d.selected)\n                        \n                        index_name.update({data:`\n                        <div class=\"primary lighten-1 white--text pa-2 headline font-weight-light\">\n                             Index: ${t[0].entity.id}\n                        </div>\n                        `})\n                        \n                       mediator.clearQuerySettings();\n                       mediator.hideIndicators()\n                       mediator.api.runDps(getScript(\"get_index_info\"),{index:t[0].entity.id, service})\n                          .then( response => {\n                                mediator.showIndicators()\n                                mediator.updateIndicators(response.data)      \n                          })\n                        \n                        // indexInfo.update({data:`<div class=\"secondary--text px-3 body-1\">Wait..</div>`})\n                        //  indexInfo.hide() \n                        //  indexInfoHeader.hide() \n                        //  mediator.api.runDps(getScript(\"index_info\"),{index:t[0].entity.id, service})\n                        //   .then( response => {\n                        //         indexInfo.show()\n                        //         indexInfoHeader.show()\n                        //         indexInfo.update({data:response.data})      \n                        //   })    \n                         mediator.api.runDps(getScript(\"get_index_structure\"),{index:t[0].entity.id, service})\n                          .then( response => {\n                            //   fieldSelector.show()\n                            //   fieldSelector.update({data:response.data})\n                              querySettings.show()\n                              mediator.querySettings.field.columns.items = response.data.map( d => d.id)\n                              querySettings.update({data: mediator.querySettings})\n                              mediator.dataStructure = response.data\n                              mediator.index = t[0].entity.id \n                              mediator.api.runDps(getScript(\"get_index_data\"),{\n                                    index: mediator.index, \n                                    structure: mediator.dataStructure, \n                                    service,\n                                    query: getQuery(mediator.querySettings.field)\n                              })\n                                .then( response => {\n                                    mediator.indexData = response.data\n                                    table.show()\n                                    indexDataHeader.show()\n                                    mediator.updateTable(response.data)\n                                })    \n                          })\n                          \n                        //   mediator.api.runDps(getScript(\"mappings\"),{index:t[0].entity.id, service})\n                        //   .then( response => {\n                        //       mappings.show()\n                        //       mappingsHeader.show()\n                        //       mappings.update({data:response.data})\n                        //   })\n                          \n                        //   mediator.api.runDps(getScript(\"tree\"),{index:t[0].entity.id, service})\n                        //   .then( response => {\n                        //       tree.show()\n                        //       mappingsHeader.show()\n                        //       tree.update({data:response.data})\n                        //   })\n                          \n                          \n                    },\n                    rule: d => {\n                        return d.config.name == \"indexSelector\"\n                    }    \n                })\n            \n                // mediator.api.on({\n                //     event: \"data-select\",\n                //     callback:(emitter,data) => {\n                //         selectedFields = data.selection.filter(d => d.selected)\n                //         table.show()\n                //         indexDataHeader.show()\n                //         updateTable()        \n                //     },\n                //     rule: d => {\n                //         return d.config.name == \"fieldSelector\"\n                //     }    \n                // })\n            } else {\n                p.cancel()\n                mediator.api.warning({\n                    type:\"error\",\n                    title:\"Elasticsearch service error\",\n                    text:`No living connection on ${window.esUrl}`\n                })\n            }    \n        })\n        \n        \n    }\n    \n    mediator.on({\n        event: \"start-page-script\",\n        callback: () => {\n            \n            renderPage(window.esService)\n        },\n        rule: ()=>true\n    })\n    \n    mediator.on({\n        event: \"init-page-state\",\n        callback: () => {\n            \n            initPage()\n        },\n        rule: ()=>true\n    })\n    \n    mediator.on({\n        event:\"page-stop\",\n        callback: ()=>{\n            this.off()\n        },\n        rule:()=>true\n    })\n    \n    \n    let getQuery = settings => {\n        \n        if(!settings.useFilter.value) return {\n \n          \"size\": parseFloat(settings.rows.value),\n          \n          \"query\": {\n            \t\"bool\": {\n            \t\t\"must\": [],\n            \t\t\"filter\": [\n            \t\t\t{\n            \t\t\t\t\"match_all\": {}\n            \t\t\t}\n            \t\t],\n            \t\t\"should\": [],\n            \t\t\"must_not\": []\n            \t}\n            }\n        }\n        \n        \n         let parseNonTimeValue = (v) => {\n                let isBoolean = d => d.match(/true|false/g)\n                let isNumber = d => !Number.isNaN(parseFloat(d))\n                if(isBoolean(v)) return v == \"true\"\n                if(isNumber(v)) return parseFloat(v)\n                return v\n            }\n            \n            let normalizeValue = (v) => {\n                \n                let valueFormat = /\\(([\\s\\S]*)\\)/g\n                let parts = v.split(valueFormat).map( d => d.trim())\n                if (parts.length == 1) return parseNonTimeValue(parts[0]) \n                \n                return moment(parts[0],parts[1]).toDate()\n            }\n            \n            let operation =/[\\!\\<\\>\\=]?\\=|\\<|\\>/g\n            let listSplitter = /\\|/g\n            let negotiation = /\\!/g\n            \n            settings.query.value = settings.query.value || \"\" \n            let query = settings.query.value\n                            .trim()\n                            .split(\"\\n\")\n                            .map(d => d.trim())\n                            .filter(d => d)\n                            .filter(d => !d.startsWith(\"//\") )\n            \n           \n            query =  query.map(d => {\n                let o = d.match(operation)\n                let field, value\n                if(o){\n                    let parts = d.split(operation)\n                    return {\n                        operation: o[0],\n                        field: parts[0].trim(),\n                        value: parts[1].trim().split(listSplitter).map( v => normalizeValue(v.trim()) )\n                    }\n                } else {\n                    let parts = d.split(negotiation).map( v => v.trim())\n                    let op = (parts.length > 1) ? \"!\" : \"?\"\n                    let f = (parts.length > 1) ? parts[1] : parts[0]\n                    return {\n                        operation: op,\n                        field: f\n                    }\n                }\n            })\n            \n            return {\n                size: parseFloat(settings.rows.value),\n                query:{ bool: \n                    {\n                    must: query\n                            .filter( q => !q.operation.match(negotiation))\n                            .map( q => {\n                                if (q.operation == \"?\") return { exists: { field: q.field } }\n                                if (q.operation == \"==\") {\n                                    if (q.value.length == 1) {\n                                        let temp = { match_phrase: {}}\n                                        temp.match_phrase[q.field] = q.value[0]\n                                        return temp\n                                    } else {\n                                        return {\n                                          bool: {\n                                            should: q.value.map(v => {\n                                                let temp = { match_phrase: {}}\n                                                temp.match_phrase[q.field] = v\n                                                return temp\n                                            }),\n                                            minimum_should_match: 1\n                                          }\n                                        }\n                                    }\n                                } \n                                if(q.operation == \">=\") {\n                                    let temp = { range:{}}\n                                    temp.range[q.field] = {gte: q.value[0]}\n                                    return temp\n                                } \n                                if(q.operation == \">\"){\n                                    let temp = { range:{}}\n                                    temp.range[q.field] = {gt: q.value[0]}\n                                    return temp\n                                } \n                                if(q.operation == \"<=\") {\n                                    let temp = { range:{}}\n                                    temp.range[q.field] = {lte: q.value[0]}\n                                    return temp\n                                }    \n                                if(q.operation == \"<\"){\n                                    let temp = { range:{}}\n                                    temp.range[q.field] = {lt: q.value[0]}\n                                    return temp\n                                } \n                                \n                            }),\n                    filter: [\n                        {\n                          match_all: {}\n                        }\n                      ],\n                    should: [],\n                    must_not: query\n                                .filter( q => q.operation.match(negotiation))\n                                .map( q => {\n                                    if (q.operation == \"!\") return { exists: { field: q.field } }\n                                    if (q.operation == \"!=\") {\n                                        if (q.value.length == 1) {\n                                            let temp = { match_phrase: {}}\n                                            temp.match_phrase[q.field] = q.value[0]\n                                            return temp\n                                        } else {\n                                            return {\n                                              bool: {\n                                                should: q.value.map(v => {\n                                                    let temp = { match_phrase: {}}\n                                                    temp.match_phrase[q.field] = v\n                                                    return temp\n                                                }),\n                                                minimum_should_match: 1\n                                              }\n                                            }\n                                        }\n                                    } \n                                    \n                                }),\n                }\n                }\n            }\n    }\n    \n    mediator.on({\n        event:\"apply\",\n        callback: (data) => {\n           \n            mediator.querySettings.field = data\n            table.hide()\n            selectedProgress.hide()\n           \n            mediator.api.runDps(getScript(\"get_index_data\"),{\n                    index:mediator.index, \n                    structure: mediator.dataStructure, \n                    service: window.esService,\n                    query: getQuery(mediator.querySettings.field)\n              })\n                .then( response => {\n                  \n                    mediator.indexData = response.data\n                    table.show()\n                    indexDataHeader.show()\n                    table.show()\n                    mediator.updateTable(response.data)\n                })\n        },\n        role: () => true \n    })"},"id":"xvrm4xxoop"},{"type":"dps-suite-widget","name":"noname","icon":"mdi-card-text-outline","options":{"widget":{"visible":true}},"scripts":[{"name":"get_index_structure","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: get_index_structure\n **     SERVICE: http://localhost:8098\n **\n **/\n\n <?javascript\n    // $scope.service = { host: \"https://owdiu9cgtv:n3q29pc0dt@ginkgo-232472029.eu-west-1.bonsaisearch.net/\"}//localhost:9200\" }\n    // $scope.index = \"kibana_sample_data_ecommerce\"\n ?>\nservice.es(\n    from: {{service}},\n    cmd:\"indices.getMapping\",\n    args:<? {\n        index:$scope.index\n    } ?>\n    ,\n    returns:<? \n        d => {\n            let res = []\n            \n            let fetchFields = (properties, prefix) => {\n                _.keys( properties ).forEach( p => {\n                    let c = `${(prefix)?prefix+\".\":\"\"}${p}`\n                    res.push({\n                      id:c,\n                      title:c,\n                      data:{\n                          fieldName:c,    \n                          type: properties[p].type || \"object\"\n                      }\n                    })\n                    // if( properties[p].properties ) {\n                    //     fetchFields(properties[p].properties,`${(prefix) ? prefix+\".\":\"\"}${p}`)\n                    // }    \n                })\n            }\n        \n            fetchFields(d[$scope.index].mappings.properties)\n            \n            return res\n        }\n    ?>\n)   "},{"name":"get_index_data","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: get_index_data\n **     SERVICE: http://localhost:8098\n **\n **/\n\n// <?javascript\n\n//     $scope.query = {\n \n//   \"size\": 500,\n  \n//   \"query\": {\n// \t\"bool\": {\n// \t\t\"must\": [],\n// \t\t\"filter\": [\n// \t\t\t{\n// \t\t\t\t\"match_all\": {}\n// \t\t\t}\n// \t\t],\n// \t\t\"should\": [],\n// \t\t\"must_not\": []\n// \t}\n// }\n \n// }    \n//   $scope.service = { host: \"localhost:9200\" }\n//     $scope.index = \"kibana_sample_data_flights\"\n//     $scope.structure = [\n//     {\n//         \"id\": \"timestamp\",\n//         \"title\": \"timestamp\",\n//         \"data\": {\n//             \"fieldName\": \"timestamp\",\n//             \"type\": \"date\"\n//         }\n//     },\n//     {\n//         \"id\": \"dayOfWeek\",\n//         \"title\": \"dayOfWeek\",\n//         \"data\": {\n//             \"fieldName\": \"dayOfWeek\",\n//             \"type\": \"integer\"\n//         }\n//     },\n//     {\n//         \"id\": \"OriginWeather\",\n//         \"title\": \"OriginWeather\",\n//         \"data\": {\n//             \"fieldName\": \"OriginWeather\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"OriginRegion\",\n//         \"title\": \"OriginRegion\",\n//         \"data\": {\n//             \"fieldName\": \"OriginRegion\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"OriginLocation\",\n//         \"title\": \"OriginLocation\",\n//         \"data\": {\n//             \"fieldName\": \"OriginLocation\",\n//             \"type\": \"geo_point\"\n//         }\n//     },\n//     {\n//         \"id\": \"OriginCountry\",\n//         \"title\": \"OriginCountry\",\n//         \"data\": {\n//             \"fieldName\": \"OriginCountry\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"OriginCityName\",\n//         \"title\": \"OriginCityName\",\n//         \"data\": {\n//             \"fieldName\": \"OriginCityName\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"OriginAirportID\",\n//         \"title\": \"OriginAirportID\",\n//         \"data\": {\n//             \"fieldName\": \"OriginAirportID\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"Origin\",\n//         \"title\": \"Origin\",\n//         \"data\": {\n//             \"fieldName\": \"Origin\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"FlightTimeMin\",\n//         \"title\": \"FlightTimeMin\",\n//         \"data\": {\n//             \"fieldName\": \"FlightTimeMin\",\n//             \"type\": \"float\"\n//         }\n//     },\n//     {\n//         \"id\": \"FlightTimeHour\",\n//         \"title\": \"FlightTimeHour\",\n//         \"data\": {\n//             \"fieldName\": \"FlightTimeHour\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"FlightNum\",\n//         \"title\": \"FlightNum\",\n//         \"data\": {\n//             \"fieldName\": \"FlightNum\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"FlightDelayType\",\n//         \"title\": \"FlightDelayType\",\n//         \"data\": {\n//             \"fieldName\": \"FlightDelayType\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"FlightDelayMin\",\n//         \"title\": \"FlightDelayMin\",\n//         \"data\": {\n//             \"fieldName\": \"FlightDelayMin\",\n//             \"type\": \"integer\"\n//         }\n//     },\n//     {\n//         \"id\": \"FlightDelay\",\n//         \"title\": \"FlightDelay\",\n//         \"data\": {\n//             \"fieldName\": \"FlightDelay\",\n//             \"type\": \"boolean\"\n//         }\n//     },\n//     {\n//         \"id\": \"DistanceMiles\",\n//         \"title\": \"DistanceMiles\",\n//         \"data\": {\n//             \"fieldName\": \"DistanceMiles\",\n//             \"type\": \"float\"\n//         }\n//     },\n//     {\n//         \"id\": \"DistanceKilometers\",\n//         \"title\": \"DistanceKilometers\",\n//         \"data\": {\n//             \"fieldName\": \"DistanceKilometers\",\n//             \"type\": \"float\"\n//         }\n//     },\n//     {\n//         \"id\": \"DestWeather\",\n//         \"title\": \"DestWeather\",\n//         \"data\": {\n//             \"fieldName\": \"DestWeather\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"DestRegion\",\n//         \"title\": \"DestRegion\",\n//         \"data\": {\n//             \"fieldName\": \"DestRegion\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"DestLocation\",\n//         \"title\": \"DestLocation\",\n//         \"data\": {\n//             \"fieldName\": \"DestLocation\",\n//             \"type\": \"geo_point\"\n//         }\n//     },\n//     {\n//         \"id\": \"DestCountry\",\n//         \"title\": \"DestCountry\",\n//         \"data\": {\n//             \"fieldName\": \"DestCountry\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"DestCityName\",\n//         \"title\": \"DestCityName\",\n//         \"data\": {\n//             \"fieldName\": \"DestCityName\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"DestAirportID\",\n//         \"title\": \"DestAirportID\",\n//         \"data\": {\n//             \"fieldName\": \"DestAirportID\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"Dest\",\n//         \"title\": \"Dest\",\n//         \"data\": {\n//             \"fieldName\": \"Dest\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"Carrier\",\n//         \"title\": \"Carrier\",\n//         \"data\": {\n//             \"fieldName\": \"Carrier\",\n//             \"type\": \"keyword\"\n//         }\n//     },\n//     {\n//         \"id\": \"Cancelled\",\n//         \"title\": \"Cancelled\",\n//         \"data\": {\n//             \"fieldName\": \"Cancelled\",\n//             \"type\": \"boolean\"\n//         }\n//     },\n//     {\n//         \"id\": \"AvgTicketPrice\",\n//         \"title\": \"AvgTicketPrice\",\n//         \"data\": {\n//             \"fieldName\": \"AvgTicketPrice\",\n//             \"type\": \"float\"\n//         }\n//     }\n// ]\n//  ?>\nservice.es(\n    from: {{service}},\n    cmd:\"search\",\n    args:<? {\n        index:$scope.index,\n        body: $scope.query\n    } ?>\n    ,\n    returns:<? \n        d => d.hits.hits.map( r => {\n            let res = {}\n            $scope.structure.forEach( f => {\n                let value = r._source[f.id]\n                let type = f.data.type\n                if (type == \"float\"){\n                    value = Number.parseFloat(value.toFixed(3))\n                } else if(type == \"date\") {\n                    value = moment(new Date(value)).format(\"MMM DD YYYY HH:mm:ss\")\n                }\n                if(_.isObject(value)) {\n                    value = JSON.stringify(value)\n                }\n                res[f.id] = value\n                    \n                })\n            return res\n        })\n    ?>\n)   \n\nset(\"data\")\n\nservice.es(\n    from: {{service}},\n    cmd:\"count\",\n    args:<? {\n        index:$scope.index,\n        body: {\n \n              \"query\": {\n            \t\"bool\": {\n            \t\t\"must\": [],\n            \t\t\"filter\": [\n            \t\t\t{\n            \t\t\t\t\"match_all\": {}\n            \t\t\t}\n            \t\t],\n            \t\t\"should\": [],\n            \t\t\"must_not\": []\n            \t}\n            }\n \n        }\n    } ?>\n    ,\n    returns:<? \n        d => d.count\n    ?>\n)   \n\nset(\"total\")\n\n<?javascript\n    $scope.res = {\n        total: $scope.total,\n    \t\"dataset\": {\n    \t\t\"dimensions\": _.keys($scope.data[0]),\n    \t\t\"source\": $scope.data\n    \t}\n    }\t\n?>\n\nreturn(\"res\")"},{"name":"index_info","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: info\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n    // $scope.service = { host: \"https://owdiu9cgtv:n3q29pc0dt@ginkgo-232472029.eu-west-1.bonsaisearch.net/\"}//localhost:9200\" }\n    // $scope.index = \"kibana_sample_data_flights\"\n ?>\n// service.es(\n//     from: {{service}},\n//     cmd:\"indices.get\",\n//     args:<? {\n//         index:$scope.index,\n//         // format:\"json\",\n//         // help:true\n//     } ?>\n//     ,\n//     returns:<? \n//         d => {\n//             let res = {\n//                 name: d[$scope.index].settings.index.provided_name,\n//                 createdAt: moment(new Date(d[$scope.index].settings.index.creation_date)).format(\"YYYY.MM.DD HH:mm:ss\"),\n//                 number_of_shards: d[$scope.index].settings.index.number_of_shards\n//             }\n//             return res\n//         }\n//     ?>\n// )   \n\n// set(\"data\")\n\nservice.es(\n    from: {{service}},\n    cmd:\"cat.indices\",\n    args:<? ({\n        format:\"json\"\n    })\n    ?>\n    ,\n    return:<?\n        d => _.find(d, i => i.index == $scope.index)\n    ?>\n)\nset(\"extData\")\n\n<?html\n    <div class=\"pa-3\" style=\"border:1px solid #eaeaea;background:white;\">\n        \n        <div class=\"body-1 secondary--index\">\n            <b>Name:</b> <span class=\"primary--text\">${index}</span><br/>\n           \n            \n            <b>Health:</b> <i class=\"mdi mdi-heart-circle-outline subheading ${status}--text\"></i><br/>\n            <b>Status:</b> ${status}<br/>\n            <b>Documents:</b> ${docs_count}<br/>\n            <b>Deleted:</b> ${docs_deleted}<br/>\n          \n            <b>Storage:</b> ${store_size}<br/><br/><br/>\n            \n            \n            \n        </div>\n    </div>    \n\n?>\nset(\"html\")\n<?javascript\n    $scope.data = _.extend({}, $scope.extData)\n    $scope.data.docs_count = $scope.data[\"docs.count\"]\n    $scope.data.docs_deleted = $scope.data[\"docs.deleted\"]\n    $scope.data.store_size = $scope.data[\"store.size\"]\n    $scope.data.status = ($scope.data.status == \"red\")\n                        ? \"error\"\n                        : ($scope.data.status == \"yellow\")\n                            ? \"warning\"\n                            : \"success\"\n    $scope.res = _.template($scope.html)($scope.data)\n?>\nreturn(\"res\")\ntext()\n"},{"name":"cluster_info","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: test\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n    // $scope.service = { host: \"https://owdiu9cgtv:n3q29pc0dt@ginkgo-232472029.eu-west-1.bonsaisearch.net/\"}//localhost:9200\" }\n?> \n\nservice.es(\n    from: {{service}},\n    cmd:\"cluster.stats\"\n)\n\nset(\"data\")\n\n<?html\n\n\n    <div class=\"mx-3\">\n    <div class=\"layout row align-center primary lighten-1 white--text caption\">\n    \n    <div class=\"flex xs1  pa-2 font-weight-light headline\">\n        <!--<a><img src=\"https://s3.amazonaws.com/assets.heroku.com/addons.heroku.com/icons/854/original.png?1429293570\"></a>-->\n        Cluster Info\n    </div>\n    <div class=\"flex text-xs-right pr-2 \">\n    <div class=\" layout row justify-right\">\n    <div class=\"spacer\"></div>\n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Host\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                        ${host}\n                    </div>\n        </div>    \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Name\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                         ${cluster_name}\n                    </div>\n        </div> \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        OS\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                        ${nodes.os.names[0].name}\n                    </div>\n        </div> \n            \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Allocated processors\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                      ${nodes.os.allocated_processors} from  ${nodes.os.available_processors}\n                    </div>\n        </div> \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Health\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                      ${status}\n                    </div>\n        </div> \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Indices\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                      ${indices.count}\n                    </div>\n        </div> \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Number of shards\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                      ${indices.shards.total}\n                    </div>\n        </div> \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Documents\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                      ${indices.docs.count}\n                    </div>\n        </div> \n        \n        <div class=\"ma-2\">\n                    <div class=\"text-center body-1\">\n                        Deleted\n                    </div>\n                    <div class=\"text-center font-weight-light\">\n                      ${indices.docs.deleted}\n                    </div>\n        </div> \n      </div>\n    </div>\n</div>\n</div>\n    \n\n?>\nset(\"html\")\n<?javascript\n    $scope.data.host = ($scope.service) ? $scope.service.host : \"Default Elasticsearch service\"\n    // $scope.data.status = ($scope.data.status == \"red\")\n    //                     ? \"error\"\n    //                     : ($scope.data.status == \"yellow\")\n    //                         ? \"warning\"\n    //                         : \"success\"\n    $scope.res = _.template($scope.html)($scope.data)\n?>\nreturn(\"res\")\ntext()\n"},{"name":"1","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: 1\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n    // $scope.service = { host:\"localhost:9200\" }\n    $scope.index = \"kibana_sample_data_ecommerce\"\n ?>\nservice.es(\n    from: {{service}},\n    cmd:\"indices.getMapping\",\n    args:<? {\n        index: $scope.index,\n        //type:\"geoip\",\n        // includeTypeName:true\n    } ?>\n    // ,\n    // returns:<? \n    //     d => {\n    //         let res = _.keys(d[$scope.index].mappings.properties).map( f => ({\n    //           id:f,\n    //           title:f,\n    //           data:{\n    //               fieldName:f,    \n    //               type: d[$scope.index].mappings.properties[f].type\n    //           }\n    //         }))\n    //         res.reverse()\n    //         return res\n    //     }\n    // ?>\n)   "},{"name":"get_index_list","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: get_index_list\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n// $scope.service = { host: \"https://owdiu9cgtv:n3q29pc0dt@ginkgo-232472029.eu-west-1.bonsaisearch.net/\"}//localhost:9200\" }\n?>\nservice.es(\n    from: {{service}},\n    cmd:\"cat.indices\",\n    args:<? ({\n        format:\"json\"\n    })\n    ?>,\n    return:<?\n        d => d.map(r => r.index).filter(r=> !r.startsWith(\".\"))\n    ?>\n)\nc.order()\nc.map(<? d => ({id:d, title:d}) ?>)"},{"name":"test","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: test\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n    $scope.service = { host: \"localhost:9200\" }\n    $scope.index = \"kibana_sample_data_flights\"\n ?>\n\nservice.es(\n    from: {{service}},\n    cmd:\"cat.indices\",\n    args:<? ({\n        index: $scope.index,\n        format:\"json\"\n    })\n    ?>\n    ,\n    return:<?\n        d => d[0]\n    ?>\n)\nset(\"extData\")\n\n<?html\n    <div class=\"pa-3\" style=\"border:1px solid #dedede;background:white;\">\n        <!--<div class=\"headline secondary--index\">-->\n        <!--    Index Info-->\n        <!--</div>    -->\n        <div class=\"body-1 secondary--index\">\n            <b>Name:</b> <span class=\"primary--text\">${index}</span><br/>\n           \n            \n            <b>Health:</b> <span style=\"color:${health}\"><i class=\"mdi mdi-cards-heart\"></i></span><br/>\n            <b>Status:</b> ${status}<br/>\n            <b>Documents:</b> ${docs_count}<br/>\n            <b>Deleted:</b> ${docs_deleted}<br/>\n            \n            <b>Storage:</b> ${store_size}<br/><br/>\n            \n            \n            \n        </div>\n    </div>    \n\n?>\nset(\"html\")\n<?javascript\n    $scope.data = _.extend({}, $scope.extData)\n    $scope.data.docs_count = $scope.data[\"docs.count\"]\n    $scope.data.docs_deleted = $scope.data[\"docs.deleted\"]\n    $scope.data.store_size = $scope.data[\"store.size\"]\n    \n    $scope.res = _.template($scope.html)($scope.data)\n?>\nreturn(\"res\")\ntext()\n"},{"name":"ping","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: 111\n **     SERVICE: http://localhost:8098\n **\n **/\n// <?javascript\n//     $scope.service = { host: \"localhost:9200\" }\n//  ?>\n\nservice.es(\n    from: {{service}},\n    cmd:\"ping\"\n)\n"},{"name":"mappings","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: mappings\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n// $scope.service = { host:\"localhost:9200\"}\n// $scope.index=\"temp\"\n\n?>\nservice.es(\n    from: {{service}},\n    cmd:\"indices.getMapping\",\n    args:<? {\n        index:$scope.index\n    } ?>\n)    \nset(\"data\")\n\n<?html\n    <code class=\"caption secondary--text\" style=\"width: 100%;\n    height: 20em;\n    overflow: auto;\n    background:white;\">\n        ${mappings}\n    </code>    \n?>\nset(\"html\")\n\n<?javascript\n    $scope.res = _.template($scope.html)({\n        mappings: JSON.stringify($scope.data[$scope.index].mappings,null,\"   \")\n    })    \n?>\nreturn (\"res\")\nhtml()"},{"name":"tree","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: mappings_tree\n **     SERVICE: http://localhost:8098\n **\n **/\n \n <?javascript\n// $scope.service = { host:\"localhost:9200\"}\n// $scope.index=\"sdi_sdi\"\n\n?>\nservice.es(\n    from: {{service}},\n    cmd:\"indices.getMapping\",\n    args:<? {\n        index:$scope.index\n    } ?>,\n    return: <? d => d[$scope.index].mappings ?>\n)    \nset(\"data\")\n\n<?javascript\n \n    var getChilds = (node, name) => {\n        let n = name\n        if ( node.type ) n += \" [\" + node.type + \"]\"\n        if ( !_.isObject(node) ) n += \" : \" + node\n        \n        let res = {\n         name: n,\n         children:[]\n        }\n        _.keys(node).forEach( k => {\n            if(_.isObject(node[k])){\n                res.children.push(getChilds(node[k],k))\n            } \n            // else {\n            //     res.children.push({\n            //         name:`${k}:${node[k]}`,\n            //         children:[]\n            //     })\n            // }\n        })\n        return res    \n    }\n    \n    $scope.res = {\n\t\"tooltip\": {\n\t\t\"trigger\": \"item\",\n\t\t\"triggerOn\": \"mousemove\"\n\t},\n\t\"series\": [\n\t\t{\n\t\t\t\"type\": \"tree\",\n\t\t\t\"name\": \"tree2\",\n\t\t\t\"data\": [getChilds($scope.data,$scope.index)],\n\t\t\t\"top\": \"10%\",\n\t\t\t\"left\": \"10%\",\n\t\t\t\"bottom\": \"10%\",\n\t\t\t\"right\": \"15%\",\n\t\t\t\"symbolSize\": 8,\n\t\t\t\"symbol\": \"rect\",\n\t\t\t\"roam\": true,\n\t\t\t\"label\": {\n\t\t\t\t\"normal\": {\n\t\t\t\t\t\"position\": \"top\",\n\t\t\t\t\t\"align\": \"center\",\n\t\t\t\t\tfontSize:14\n\t\t\t\t// \t\"fontWeight\":\"bold\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"leaves\": {\n\t\t\t    \"symbolSize\": 2,\n\t\t\t\t\"label\": {\n\t\t\t\t\t\"normal\": {\n\t\t\t\t\t\t\"position\": \"right\",\n\t\t\t\t\t\t\"verticalAlign\": \"middle\",\n\t\t\t\t\t\t\"align\": \"left\",\n\t\t\t\t\t\t\"fontWeight\":\"bold\",\n\t\t\t\t\t\tfontSize:14\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"expandAndCollapse\": true,\n\t\t\t\"initialTreeDepth\": 3,\n\t\t\t\"animationDuration\": 550,\n\t\t\t\"animationDurationUpdate\": 750\n\t\t}\n\t]\n}\n    \n    \n    \n?>\nreturn(\"res\")\n"},{"name":"get_index_info","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: get_index_info\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es(\n    from: {{service}},\n    cmd:\"cat.indices\",\n    args:<? ({\n        format:\"json\"\n    })\n    ?>\n    ,\n    return:<?\n        d => _.find(d, i => i.index == $scope.index)\n    ?>\n)\nset(\"extData\")\n\n<?html\n\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background:white;\">\n<div class=\"info--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi ${icon}\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                ${title}\n        </div>\n</div>\n</div>\n\n\n?>\nset(\"html\")\n<?javascript\n    $scope.data = _.extend({}, $scope.extData)\n    $scope.data.docs_count = $scope.data[\"docs.count\"]\n    $scope.data.docs_deleted = $scope.data[\"docs.deleted\"]\n    $scope.data.store_size = $scope.data[\"store.size\"]\n    $scope.data.color = ($scope.data.status == \"red\")\n                        ? \"error\"\n                        : ($scope.data.status == \"yellow\")\n                            ? \"warning\"\n                            : \"success\"\n    let t = _.template($scope.html)\n    $scope.res = {\n        health: t({\n            title: \"Status\",\n            color: $scope.data.color,\n            value: $scope.data.status,\n            icon: \"mdi-heart-circle-outline\"\n        }),\n        documents: t({\n            title: \"Documents\",\n            color: \"info\",\n            value: $scope.data.docs_count,\n            icon: \"mdi-file-document-box-multiple-outline\"\n        }),\n        deleted: t({\n            title: \"Deleted\",\n            color: \"info\",\n            value: $scope.data.docs_deleted,\n            icon: \"mdi-trash-can-outline\"\n        }),\n        storage: t({\n            title: \"Storage\",\n            color: \"info\",\n            value: $scope.data.store_size,\n            icon: \"mdi-database\"\n        }),\n    }\n?>\nreturn(\"res\")\n\n"}],"data":{"source":"embedded","embedded":"<h2 color=\"#eee\"><center>not configured<center></h2><p>Use options dialog for configure this widget</p>","script":""},"id":"s05upyxsum"}]},"wofhicigx3h":{"widgets":[{"type":"html-widget","name":"indexDataHeader","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary lighten-1 white--text pa-2 headline font-weight-light\">\n Samples\n</div>","script":""},"id":"pzm1xhcc3im"}]},"o1hu8n8317q":{"widgets":[{"type":"inputs-widget","name":"querySettings","icon":"mdi-file-document-box-outline","options":{"widget":{"visible":true,"height":300}},"data":{"source":"embedded","embedded":{"field":{"columns":{"type":"select","label":"Table Columns","multiple":true,"items":[{"value":"a","label":"Last Day"},{"value":"b","label":"Last Month"},{"value":"c","label":"Last 15 Years"}],"itemText":"label","value":{"value":"a","label":"Last Day"}},"rows":{"type":"number","label":"Rows Limit","value":10},"useFilter":{"type":"switch","value":true,"label":"Use Value Filter"},"query":{"type":"textarea","label":"Query","show":["useFilter"]}}},"script":""},"id":"omwzt4cfdde"}]},"prroix9g39s":{"widgets":[{"type":"html-widget","name":"selectedProgress","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"l0gyqzwzd8p"},{"type":"data-table-widget","name":"indexData","icon":"mdi-grid","options":{"widget":{"visible":true},"rowsPerPage":[10,25,50,{"text":"All","value":-1}],"usePagination":true,"headerTextOrientation":"horizontal","dense":true,"typography":"caption","textColor":"default","textBackground":"default","useColors":true,"palette":{"id":"BuGn_9","color":["#f7fcfd","#e5f5f9","#ccece6","#99d8c9","#66c2a4","#41ae76","#238b45","#006d2c","#00441b"],"isReverse":false},"colorMode":"column","pagination":false,"fixedHeader":true},"data":{"source":"embedded","embedded":{"dataset":{"dimensions":[],"source":[]}},"script":""},"id":"agwnj31a576"}]},"lapnr0gde3":{"widgets":[{"type":"html-widget","name":"noname_clone_gybpp2086g4","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text px-3\">\n<div class=\"display-2 font-weight-light\">\n     <i class=\"mdi mdi-feature-search-outline pr-2\"></i>Indices Exploration Example\n</div>\n<div class=\"body-1 font-weight-light\">\n    Analyze Elasticsearch Indices (Mappings and data of indices)\n</div>\n</div>\n","script":""},"id":"gybpp2086g4"}]},"2vwvz46hqxg":{"widgets":[{"type":"html-widget","name":"clusterInfo","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"epu1tfkex4a"}]},"vi9l9nacss":{"widgets":[{"type":"html-widget","name":"health","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"4nkyus1o0bm"}]},"gvkmxvq5shd":{"widgets":[{"type":"html-widget","name":"documents","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"hs3rj5g0v9t"}]},"6d3eeyidnan":{"widgets":[{"type":"html-widget","name":"deleted","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div>\n</div>","script":""},"id":"2s5j9v3ornm"}]},"1u77mw4xbau":{"widgets":[{"type":"html-widget","name":"storage","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div></div>","script":""},"id":"f8j9h45o8ws"}]},"auc2fg14map":{"widgets":[{"type":"data-selector-widget","name":"indexSelector","icon":"mdi-format-list-checks","options":{"widget":{"visible":true,"multiple":false,"label":"Select Index"},"mapper":{"id":"3_alpha_code","title":"name"}},"data":{"source":"embedded","embedded":[],"script":"<?javascript\n// $scope.service = { host: \"https://owdiu9cgtv:n3q29pc0dt@ginkgo-232472029.eu-west-1.bonsaisearch.net/\"}//localhost:9200\" }\n?>\nservice.es(\n    from: {{service}},\n    cmd:\"cat.indices\",\n    args:<? ({\n        format:\"json\"\n    })\n    ?>,\n    return:<?\n        d => d.map(r => r.index).filter(r=> !r.startsWith(\".\"))\n    ?>\n)\nc.order()\nc.map(<? d => ({id:d, title:d}) ?>)"},"id":"ntpohtkiju"}]},"r0w2t1d92lk":{"widgets":[{"type":"html-widget","name":"index_name","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"\r\n<div class=\"pa-2 ma-2 primary--text\">\r\n   \r\n       \t\r\n            <div class=\"headline text-xs-center\">\r\n                <i class=\"mdi mdi-table-large pr-1\"></i>\r\n                kibana_sample_data_ecommerce\r\n            </div>\r\n            <div class=\"subheading font-weight-light text-xs-center\">\r\n                Index\r\n            </div>\r\n      \r\n   \r\n</div>    \r\n \r\n","script":""},"id":"bon7z3xzlj"}]}},"id":"explorer","title":"Indices Exploration","url":"http://dj-next.herokuapp.com/design/ElasticSearch#/explorer"},{"layout":"flex","sections":[{"align":"justify-center","holders":[{"name":"default","width":11}]},{"align":"justify-center","holders":[{"name":"1s0fl89b4ed","width":2},{"name":"ia3zycvpweh","width":3},{"name":"aztej1zacy6","width":3}]},{"align":"justify-center","holders":[{"name":"op84or84zda","width":9}]},{"align":"justify-center","holders":[{"name":"4knze7eau2t","width":2},{"name":"4f1j44cmjeg","width":7}]},{"align":"justify-center","holders":[{"name":"9bz8agwvcu5","width":9}]},{"align":"justify-center","holders":[{"name":"579lixs0nie","width":11}]}],"holders":{"default":{"widgets":[{"type":"html-widget","name":"noname_clone_baovfu83voh_clone_trbg367oscq_clone_inxk1n9p4sc","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text pa-3\">\n<div class=\"display-2 font-weight-light\">\n     <i class=\"mdi mdi-airplane pr-2\"></i>Global Flight Dashboard Example\n</div>\n<div class=\"body-1 font-weight-light\">\n    Analyze mock flight data for ES-Air, Logstash Airways, Kibana Airlines and JetBeats\n</div> \n</div>","script":""},"id":"inxk1n9p4sc","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"    let mediator = this;\n     \n    let scripts = mediator.api.selectWidgets(\"0gq3gejm3ut4\").$refs.instance.scripts\n    let getScript = name => _.find(scripts,item => item.name == name).script\n    \n    ///////////////////////////////////////////////////////////////\n    class Queue {\n    \tconstructor(callback){\n    \t\tthis.iterations = 0\n    \t\tthis.callback = callback\n    \t}\n    \n    \t_run(i, resolver) {\n    \t\ti = i || 0\n    \t\tif(!resolver){\n    \t\t\treturn new Promise( resolve => {\n    \t\t\tresolver = resolve\n    \t\t\tthis.callback(i)\n    \t\t\t\t.then(() => {\n    \t\t\t\t\tif(i < this.iterations) {\n    \t\t\t\t\t\tthis._run(i+1, resolver)\n    \t\t\t\t\t} else {\n    \t\t\t\t\t\tresolver()\n    \t\t\t\t\t}\t\n    \t\t\t\t})\t\n    \t\t\t})\t\n    \t\t} else {\n    \t\t\tthis.callback(i)\n    \t\t\t\t.then(() => {\n    \t\t\t\t\tif(i < this.iterations-1) {\n    \t\t\t\t\t\tthis._run(i+1, resolver)\n    \t\t\t\t\t} else {\n    \t\t\t\t\t\tresolver()\n    \t\t\t\t\t}\t\n    \t\t\t\t})\t\n    \t\t}\n    \t}\n    \trun(iterations){\n    \t\tthis.iterations = iterations\n    \t\treturn this._run()\n    \t}\n    } \n\n    \n    \n    //////////////////////////////////////////////////////////////\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    let widgets = [\n        {name:\"total_flights\",message:\"Prepare totals\"},\n        {name:\"flight_success\",message:\"Prepare totals\"},\n        {name:\"flight_delays\",message:\"Prepare totals\"},\n        {name:\"flight_cancellations\",message:\"Prepare totals\"},\n        {name:\"countries\",message:\"Prepare locations\"},\n        {name:\"origins\",message:\"Prepare locations\"},\n        {name:\"destinations\",message:\"Prepare locations\"},\n        {name:\"carrier_activity\",message:\"Prepare carriers info\"},\n        {name:\"carrier_robustness\",message:\"Prepare carriers info\"},\n        {name:\"map\",message:\"Prepare locations\"},\n        // {name:\"dest_countries\",message:\"Prepare locations\"},\n        {name:\"flight_delay_bar\",message:\"Prepare activity\"},\n        {name:\"activity\",message:\"Prepare activity\"},\n        // {name:\"weather\",message:\"Prepare weather stat\"},\n        {name:\"log\",message:\"Prepare log\"},\n        {name:\"stacked\",message:\"Prepare carriers info\"}\n    ].map( w => ({\n        name: w.name,\n        script: w.name,\n        message: w.message,\n        instance: mediator.api.selectWidgets( d => d.config.name == w.name)\n    }))\n    \n    mediator.api.on({\n        event:\"init-page-state\",\n        callback: () => {\n            widgets.forEach( w => {\n                w.instance.hide()\n            })\n        }\n    })\n    \n    mediator.api.on({\n        event:\"page-stop\",\n        callback: () => {\n            mediator.api.off()\n        }\n    })\n    \n    \n    mediator.api.on({\n        event:\"start-page-script\",\n        callback: () => {\n            mediator.emit(\"init-page-state\")\n            \n            let p = mediator.api.progress({\n                text:`connect to elasticsearch on ${window.esUrl}`, \n                maxStage:16, \n                title:\"Connect to elasticsearch service\"\n            })\n            // console.log(\"$dialogManager\",mediator.$dialogManager)\n            let service =  window.esService\n            let q = new Queue ( index => {\n                console.log(index,widgets[index].name,widgets[index].updated)\n                if(widgets[index].updated) return new Promise( resolve => {resolve()})\n                \n                console.log(\"init\", index, widgets[index].script)\n                return mediator.api.runDps(getScript(widgets[index].script),{service})\n                .then( response => {\n                    console.log(\"res\", index, widgets[index].script, response)\n                    if(response.type == \"error\") return\n                    p.set({text:widgets[index].message})\n                    widgets[index].updated = true;\n                    setTimeout(() => {\n                        try{\n                            widgets[index].instance.update({data:response.data})    \n                        } catch (e){\n                            console.log(\"ERROR\",widgets[index].name)\n                        }\n                        \n                        widgets[index].instance.show()\n                    }, 100)\n                    return response.data\n                })\n            })\n            \n            q.run(widgets.length)\n            .then( result => {\n                p.set({text:\"Render dashboard\"})\n                setTimeout(()=>{\n                    p.cancel()\n                }, 2000)\n                \n                \n                    \n                // Promise.all(result.map( (r, index) => new Promise( (resolve, reject) => {\n                //     try {\n                //         widgets[index].instance.show()\n                //         setTimeout(() => {\n                //             widgets[index].instance.update({data:r})\n                //             resolve(true)\n                //         }, 10)    \n                //     } catch (e) {\n                //         reject(JSON.stringify(r)+'\\\\n'+e.toString())\n                //     }    \n                // })))\n                // .then(() => {\n                //     setTimeout(()=>{\n                //         p.cancel()\n                //     }, 2000)\n                // })\n                // .catch( e => {\n                //     console.log(\"ERROR\",e)\n                // })\n                \n                // // result.forEach( (r, index) => {\n                // //     widgets[index].instance.show()\n                // //     widgets[index].instance.update({data:r})\n                    \n                // // })\n                \n            })\n            \n            // Promise.all(widgets.map(w => mediator.api.runDps(getScript(w.script),{service})\n            //     .then( response => {\n            //         p.set({text:w.message})\n            //         return response.data\n            //     })))\n            // .then( result => {\n            //     p.set({text:\"Render dashboard\"})\n            //     Promise.all(result.map( (r, index) => new Promise( (resolve, reject) => {\n            //         try {\n            //             widgets[index].instance.show()\n            //             setTimeout(() => {\n            //                 widgets[index].instance.update({data:r})\n            //                 resolve(true)\n            //             }, 10)    \n            //         } catch (e) {\n            //             reject(JSON.stringify(r)+'\\\\n'+e.toString())\n            //         }    \n            //     })))\n            //     .then(() => {\n            //         setTimeout(()=>{\n            //             p.cancel()\n            //         }, 2000)\n            //     })\n            //     .catch( e => {\n            //         console.log(\"ERROR\",e)\n            //     })\n                \n            //     // result.forEach( (r, index) => {\n            //     //     widgets[index].instance.show()\n            //     //     widgets[index].instance.update({data:r})\n                    \n            //     // })\n                \n            // })\n        }\n    })\n"},"id":"v1g5wb2amm","activated":false},{"type":"dps-suite-widget","name":"noname","icon":"mdi-card-text-outline","options":{"widget":{"visible":true}},"scripts":[{"name":"total_flights","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: total_flights\n **     SERVICE: http://localhost:8098\n **\n **/\n// <?javascript\n//  $scope.service = {\n//      host:\"https://px9z1t1oz3:8tzna6hgfv@yew-17306313.eu-west-1.bonsaisearch.net:443\"\n//  }\n// ?> \n\nservice.es(\n\t\t\t\t\n    from: {{service}},\n    cmd:\"count\",\n    args:<? {\n        index:\"kibana_sample_data_flights\",\n        body: {\n \n              \"query\": {\n            \t\"bool\": {\n            \t\t\"must\": [],\n            \t\t\"filter\": [\n            \t\t\t{\n            \t\t\t\t\"match_all\": {}\n            \t\t\t}\n            \t\t],\n            \t\t\"should\": [],\n            \t\t\"must_not\": []\n            \t}\n            }\n \n        }\n    } ?>\n    ,\n    returns:<? \n        d => d.count\n    ?>\n)   \nset(\"response\")\n<?html\n\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n<div class=\"primary--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-airplane\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                Total Flights\n        </div>\n</div>\n</div>\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value:$scope.response})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"flight_success","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: total_flights\n **     SERVICE: http://localhost:8098\n **\n **/\n \nservice.es(\n    from: {{service}},\n    cmd:\"count\",\n    args:<? {\n        index:\"kibana_sample_data_flights\",\n        body: {\n  \n          \"query\": {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"match_phrase\": {\n                    \"Cancelled\": {\n                      \"query\": false\n                    }\n                  }\n                }\n              ],\n              \"filter\": [\n                {\n                  \"match_all\": {}\n                }\n              ],\n              \"should\": [],\n              \"must_not\": []\n            }\n          }\n        }\n    } ?>\n    ,\n    returns:<? \n        d => d.count\n    ?>\n)   \nset(\"response\")\n\n\n<?html\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n<div class=\"success--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-airplane\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                Successed\n        </div>\n</div>\n</div>\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"flight_delays","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: flight_delays\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"count\",\n    args:\n    <? \n        {\n            index: 'kibana_sample_data_flights',\n            body: {\n                \"query\": {\n                    \"bool\": {\n                        \"must\": [{\n                            \"match_phrase\": {\n                                \"FlightDelay\": {\n                                  \"query\": true\n                                }\n                            }\n                        }]\n                    }\n                }\n            }\n        }\n    ?>,\n    returns:<? \n        d => d.count\n    ?>\n)\nset(\"response\")\n\n<?html\n\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n    <div class=\"warning--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-airplane\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                Delayed\n        </div>\n</div>\n</div>\n\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"flight_cancellations","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: flight_cancellations\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es(\n    from: {{service}},\n    cmd:\"count\",\n    args:<? {\n        index:\"kibana_sample_data_flights\",\n        body: {\n  \n          \"query\": {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"match_phrase\": {\n                    \"Cancelled\": {\n                      \"query\": true\n                    }\n                  }\n                }\n              ],\n              \"filter\": [\n                {\n                  \"match_all\": {}\n                }\n              ],\n              \"should\": [],\n              \"must_not\": []\n            }\n          }\n        }\n    } ?>\n    ,\n    returns:<? \n        d => d.count\n    ?>\n)   \nset(\"response\")\n\n<?html\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n    <div class=\"error--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-airplane-off\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                Cancelled\n        </div>\n</div>\n</div>\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"countries","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: countries\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"data\": {\n                  \"terms\": {\n                    \"field\": \"OriginCountry\",\n                    \"size\":200\n                  }\n                }\n              },\n              \"size\": 0,\n              \n              \"query\": {\n                \"match_all\":{}\n              }\n            }\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n    <div class=\"info--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-map-marker-outline\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                Countries\n        </div>\n</div>\n</div>\n\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations.data.buckets.length})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"carrier_activity","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: carrier_activity\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"2\": {\n      \"terms\": {\n        \"field\": \"Carrier\",\n        \"order\": {\n          \"_count\": \"desc\"\n        },\n        \"size\": 5\n      }\n    }\n  },\n  \"size\": 0,\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"stored_fields\": [\n    \"*\"\n  ],\n  \"script_fields\": {\n    \"hour_of_day\": {\n      \"script\": {\n        \"source\": \"doc['timestamp'].value.hourOfDay\",\n        \"lang\": \"painless\"\n      }\n    }\n  },\n  \"docvalue_fields\": [\n    {\n      \"field\": \"timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"query\": {\n    \"bool\": {\n    //   \"must\": [\n    //     {\n    //       \"range\": {\n    //         \"timestamp\": {\n    //           \"format\": \"strict_date_optional_time\",\n    //           \"gte\": \"2019-07-25T10:57:13.181Z\",\n    //           \"lte\": \"2019-07-26T10:57:13.181Z\"\n    //         }\n    //       }\n    //     }\n    //   ],\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations[\"2\"].buckets\n?>\nget(\"fstat\")\nc.order(by:\"doc_count\")\ns.norm.log(by:\"doc_count\")\nset(\"fstat\")\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Carrier Activity\"\n\t],\n\t\"yAxis\":$scope.fstat.map( d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Carrier Activity\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map( d => Number.parseFloat(d.log.toFixed(2)))\n\t\t}\t\n\t]\n}\n?>\nreturn(\"res\")"},{"name":"carrier_robustness","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: carrier_robustness\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"data\": {\n                  \"terms\": {\n                    \"field\": \"Carrier\",\n                    \"order\": {\n                      \"_count\": \"desc\"\n                    }\n                  }\n                }\n              },\n              \"size\":0,\n              \"query\": {\n                \n                \"match_phrase\": {\n                  \"Cancelled\": {\n                    \"query\": true\n                  }\n               }\n              }\n            }\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\n\ns.norm.log(by:\"doc_count\")\n\n\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Carries Robustness\"\n\t],\n\t\"yAxis\":$scope.fstat.map( d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Carries Robustness\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map( d => Number.parseFloat((1-d.log).toFixed(2)))\n\t\t}\t\n\t]\n}\n?>\nreturn(\"res\")"},{"name":"origin_countries","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: origin_countries\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n      \"aggs\": {\n        \"data\": {\n          \"terms\": {\n            \"field\": \"OriginCountry\",\n            \"size\": 200\n          }\n        }\n      },\n      \"size\": 0,\n      \n      \"query\": {\n        \"match_all\":{}\n      }\n        }\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\nc.order(by:\"doc_count\")\nset(\"fstat\")\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Origin Countries\"\n\t],\n\t\"yAxis\":$scope.fstat.map( d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Origin Countries\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map( d => d.doc_count)\n\t\t}\t\n\t]\n}\n?>\nreturn(\"res\")"},{"name":"dest_countries","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: dest_countries\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"data\": {\n                  \"terms\": {\n                    \"field\": \"OriginCountry\",\n                    \"size\": 92\n                  }\n                }\n              },\n              \"size\": 0,\n              \n              \"query\": {\n                \"match_all\":{}\n              }\n            }\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\nc.order(by:\"doc_count\")\nset(\"fstat\")\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Origin Countries\"\n\t],\n\t\"yAxis\":$scope.fstat.map( d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Origin Countries\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map( d => d.doc_count)\n\t\t}\t\n\t]\n}\n?>\nreturn(\"res\")"},{"name":"flight_delay_bar","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: flight_delay_bar\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n   cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"histogram\": {\n        \"field\": \"FlightDelayMin\",\n        \"interval\": 30,\n        \"min_doc_count\": 1\n      }\n    }\n  },\n  \"size\":0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": [\n        {\n          \"match_phrase\": {\n            \"FlightDelayMin\": {\n              \"query\": 0\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\n\n\n\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Flight Delay\"\n\t],\n\t\"xAxis\": $scope.fstat.map(d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Flight Delay\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map(d => d.doc_count)\n\t\t}\n\t]\n}\n?>\nreturn(\"res\")"},{"name":"activity","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: activity\n **     SERVICE: http://localhost:8098\n **\n **/\n// <?javascript\n//     $scope.service = {host:\"localhost:9200\"}\n// ?>\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"time\": {\n                  \"date_histogram\": {\n                    \"field\": \"timestamp\",\n                    \"interval\": \"1d\",\n                    \"time_zone\": \"Europe/Kiev\",\n                    \"min_doc_count\": 1\n                  },\n                  \"aggs\": {\n                    \"flight_count\": {\n                      \"terms\": {\n                        \"field\": \"Carrier\",\n                        \"order\": {\n                          \"_count\": \"asc\"\n                        },\n                        \"size\": 5\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n             \n              \"query\": {\n                \"bool\": {\n                  \n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                  \n                }\n              }\n            }\n        })\n    ?>,\n    returns: <? \n        d => _.drop(d.aggregations.time.buckets.map( t => {\n            let res = {\n                time: moment(new Date(t.key_as_string)).format(\"YYYY-MM-DD\")\n            }\n            t.flight_count.buckets.forEach( c => {\n                res[c.key] = c.doc_count\n            })\n            return res\n        }))\n    ?> \n)\n\nc.order(by:\"time\")\nc.select(where: <? d => _.keys(d).length > 1 ?>)\nset(\"response\")\n\n\n\n<?javascript\n    let carriers = _.drop( _.keys( $scope.response[0]))\n    $scope.res = {\n    \t\"legend\": carriers,\n    \t\"xAxis\": $scope.response.map(d => d.time),\n    \t\"series\": carriers.map( c => ({\n    \t    name: c,\n    \t    type: \"bar\",\n    \t    stack: \"a\",\n    \t    \"areaStyle\":{\n    \t\t    opacity:0.3\n    \t\t},\n    \t\t\"data\": $scope.response.map(d => d[c]),\n    \t\t\"smooth\": true\n    \t    \n    \t}))\n\t\n    }\n?>\nreturn(\"res\")\n"},{"name":"weather","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: weather\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"terms\": {\n        \"field\": \"DestWeather\",\n        \"order\": {\n          \"_count\": \"desc\"\n        },\n        \"size\": 20\n      }\n    }\n  },\n  \"size\": 0,\n \n  \"query\": {\n  \n          \"match_all\": {}\n  \n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\n\n\n\n<?javascript\n    $scope.res = {\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Weather\",\n\t\t\t\"type\": \"wordCloud\",\n\t\t\t\"left\": \"center\",\n\t\t\t\"top\": \"center\",\n\t\t\t\"width\": \"100%\",\n\t\t\t\"height\": \"100%\",\n\t\t\t\"right\": null,\n\t\t\t\"bottom\": null,\n\t\t\t\"sizeRange\": [\n\t\t\t\t10,\n\t\t\t\t48\n\t\t\t],\n\t\t\t\"gridSize\": 10,\n\t\t\t\"rotationRange\": [\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t],\n\t\t\t\"rotationStep\": 0,\n\t\t\t\"textPadding\": 10,\n\t\t\t\"drawOutOfBound\": true,\n\t\t\t\"data\": $scope.fstat.map( d => ({\n\t\t\t    name:d.key,\n\t\t\t    value: d.doc_count\n\t\t\t}))\n\t\t}\n\t]\n}\n?>\nreturn(\"res\")"},{"name":"log","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: log\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"version\": true,\n  \"size\": 500,\n  \"sort\": [\n    {\n      \"timestamp\": {\n        \"order\": \"desc\",\n        \"unmapped_type\": \"boolean\"\n      }\n    }\n  ],\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"stored_fields\": [\n    \"*\"\n  ],\n  \"script_fields\": {\n    \"hour_of_day\": {\n      \"script\": {\n        \"source\": \"doc['timestamp'].value.hourOfDay\",\n        \"lang\": \"painless\"\n      }\n    }\n  },\n  \"docvalue_fields\": [\n    {\n      \"field\": \"timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"range\": {\n            \"timestamp\": {\n              \"format\": \"strict_date_optional_time\",\n              \"gte\": \"2020-04-22T20:59:48.003Z\",\n              \"lte\": \"2020-05-23T20:59:48.004Z\"\n            }\n          }\n        }\n      ],\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": []\n    }\n  },\n  \"highlight\": {\n    \"pre_tags\": [\n      \"@kibana-highlighted-field@\"\n    ],\n    \"post_tags\": [\n      \"@/kibana-highlighted-field@\"\n    ],\n    \"fields\": {\n      \"*\": {}\n    },\n    \"fragment_size\": 2147483647\n  }\n}\n\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.hits.hits.map( d=> d._source )\n    $scope.res = {\n\t\"dataset\": {\n\t\t\"dimensions\": [\n\t\t    \n\t\t\t\"Flight Number\",\n\t\t\t\"Carrier\",\n\t\t\t\"Origin\",\n\t\t\t\"Destination\",\n\t\t\t\"Ticket Price (Avg)\",\n\t\t\t\"Distance (km)\",\n\t\t\t\"Cancelled\"\n\t\t],\n\t\t\"source\": $scope.fstat.map( d => {\n\t\t    let res = {\n\t\t        \n    \t\t\t\"Flight Number\": d.FlightNum,\n    \t\t\t\"Carrier\": d.Carrier,\n    \t\t\t\"Origin\":`${d.Origin} - ${d.OriginCountry} ${d.OriginCityName}`,\n    \t\t\t\"Destination\":`${d.Dest} - ${d.DestCountry} ${d.DestCityName}`,\n    \t\t\t\"Ticket Price (Avg)\": Number.parseFloat(d.AvgTicketPrice.toFixed(2)),\n    \t\t\t\"Distance (km)\": Number.parseFloat(d.DistanceKilometers.toFixed(0)),\n    \t\t\t\"Cancelled\": d.Cancelled\n\t\t    }\n\t\t    return res\n\t\t})\n\t}\n}\n?>\nreturn (\"res\")"},{"name":"stacked","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: stacked\n **     SERVICE: http://localhost:8098\n **\n **/\n// <?javascript\n//  $scope.service = {\n//      host:\"https://px9z1t1oz3:8tzna6hgfv@yew-17306313.eu-west-1.bonsaisearch.net:443\"\n//  }\n// ?>\n \n \nservice.es(\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n                      \"aggs\": {\n                        \"data\": {\n                          \"date_histogram\": {\n                            \"field\": \"timestamp\",\n                            \"interval\": \"2d\",\n                            \"time_zone\": \"Europe/Kiev\",\n                            \"min_doc_count\": 1\n                          },\n                          \"aggs\": {\n                            \"values\": {\n                              \"terms\": {\n                                \"field\": \"FlightDelayType\",\n                                \"order\": {\n                                  \"_count\": \"desc\"\n                                },\n                                \"size\": 5\n                              }\n                            }\n                          }\n                        }\n                      },\n                      \"size\": 0,\n                      \"docvalue_fields\": [\n                        {\n                          \"field\": \"timestamp\",\n                          \"format\": \"date_time\"\n                        }\n                      ],\n                      \"query\": {\n                        \"bool\": {\n                          \n                          \"filter\": [\n                            {\n                              \"match_all\": {}\n                            }\n                          ]\n                        }\n                      }\n                    }\n\n        })\n    ?>,\n    return: <? \n            d => d.aggregations.data.buckets.map( row => {\n             \n            let res = {\n                time: moment(new Date(row.key_as_string)).format(\"MMM DD\"),\n                data: row.values.buckets.map( b =>({\n                    key: b.key,\n                    value:b.doc_count\n                }))\n            }\n            // $scope.series.forEach( s => {\n            //     let f = _.find(row.data.buckets, i => i.key == s)\n            //     res[s] = (f) ? f.doc_count : 0\n            // })\n            return res\n        })\n?>\n)\nset(\"series\")\n\n<?javascript\n    let legend = _.unique(\n        _.flatten($scope.series.map(r => r.data)).map(r => r.key)\n    )\n    let timeline = $scope.series.map(r => r.time)\n    $scope.res = {\n    \tlegend,\n    \t\"xAxis\": timeline,\n    \t\"series\": legend.map( s => ({\n    \t    name: s,\n    \t    type:\"bar\",\n    \t    stack:\"a\",\n    \t    data: $scope.series.map( v => {\n    \t     let f = _.find(v.data, d => d.key == s)\n    \t     return (f) ? f.value : 0\n    \t    })\n    \t}))\n    }\t\n\n    \n?>\n\nreturn (\"res\")\n// service.es (\n//     from: {{service}},\n//     cmd:\"search\",\n//     args:\n//     <? \n//         ({\n//             // index: 'kibana_sample_data_flights',\n//             body: {\n//               \"aggs\": {\n//                 \"data\": {\n//                   \"date_histogram\": {\n//                     \"field\": \"timestamp\",\n//                     \"interval\": \"1h\",\n//                     \"time_zone\": \"Europe/Kiev\",\n//                     \"min_doc_count\": 1\n//                   },\n//                   \"aggs\": {\n//                     \"data\": {\n//                       \"terms\": {\n//                         \"field\": \"FlightDelayType\",\n//                         \"order\": {\n//                           \"_count\": \"desc\"\n//                         },\n//                         \"size\": 5\n//                       }\n//                     }\n//                   }\n//                 }\n//               },\n//               \"size\": 0,\n              \n//               \"query\": {\n//                 \"bool\": {\n//                   \"must\": [\n                    \n//                     {\n//                       \"range\": {\n//                         \"timestamp\": {\n//                           \"format\": \"strict_date_optional_time\",\n//                           \"gte\": \"2019-07-26T12:51:00.017Z\",\n//                           \"lte\": \"2019-07-27T12:51:00.017Z\"\n//                         }\n//                       }\n//                     }\n//                   ]\n                  \n//                 }\n//               }\n//             }\n\n//         })\n//     ?>,\n//     returns: <? \n   \n//         d => d.aggregations.data.buckets.map( row => {\n             \n//             let res = {\n//                 time: moment(new Date(row.key_as_string)).format(\"MMM DD HH:mm\")\n//             }\n//             $scope.series.forEach( s => {\n//                 let f = _.find(row.data.buckets, i => i.key == s)\n//                 res[s] = (f) ? f.doc_count : 0\n//             })\n//             return res\n//         }) \n//     ?>\n// )\n\n// set(\"data\")\n// <?javascript\n//     $scope.res = {\n// \t\"legend\": $scope.series,\n// \t\"xAxis\": $scope.data.map(d => d.time),\n// \t\"series\": $scope.series.map( s => ({\n// \t    name: s,\n// \t    type:\"bar\",\n// \t    stack:\"a\",\n// \t    data: $scope.data.map( r => r[s])\n// \t})) \n\t\n\t\n// }\n// ?>\n// return(\"res\")"},{"name":"a1","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: a1\n **     SERVICE: http://localhost:8098\n **\n **/\n<?javascript\n    $scope.service = {host:\"localhost:9200\"}\n?>\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"time\": {\n                  \"date_histogram\": {\n                    \"field\": \"timestamp\",\n                    \"interval\": \"1d\",\n                    \"time_zone\": \"Europe/Kiev\",\n                    \"min_doc_count\": 1\n                  },\n                  \"aggs\": {\n                    \"flight_count\": {\n                      \"terms\": {\n                        \"field\": \"Carrier\",\n                        \"order\": {\n                          \"_count\": \"asc\"\n                        },\n                        \"size\": 5\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n             \n              \"query\": {\n                \"bool\": {\n                  \n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                  \n                }\n              }\n            }\n        })\n    ?>,\n    returns: <? \n        d => _.drop(d.aggregations.time.buckets.map( t => {\n            let res = {\n                time: moment(new Date(t.key_as_string)).format(\"YY-MM-DD\")\n            }\n            t.flight_count.buckets.forEach( c => {\n                res[c.key] = c.doc_count\n            })\n            return res\n        }))\n    ?> \n)\n\nc.order(by:\"time\")\nc.select(where: <? d => _.keys(d).length > 1 ?>)\nset(\"response\")\n\n\n\n<?javascript\n    let carriers = _.drop( _.keys( $scope.response[0]))\n    $scope.res = {\n    \t\"legend\": carriers,\n    \t\"xAxis\": $scope.response.map(d => d.time),\n    \t\"series\": carriers.map( c => ({\n    \t    name: c,\n    \t    type: \"line\",\n    \t    stack: \"a\",\n    \t    \"areaStyle\":{\n    \t\t    opacity:0.3\n    \t\t},\n    \t\t\"data\": $scope.response.map(d => d[c]),\n    \t\t\"smooth\": true\n    \t    \n    \t}))\n\t\n    }\n?>\nreturn(\"res\")\n"},{"name":"origins","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: origins\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"terms\": {\n        \"field\": \"Origin\",\n        \"order\": {\n          \"_count\": \"asc\"\n        },\n        \"size\": 92\n      }\n    }\n  },\n  \"size\": 0,\n  \n  \"query\": {\n    \"match_all\":{}\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n    <div class=\"info--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-airplane-takeoff\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                Origins\n        </div>\n</div>\n</div>\n\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations.data.buckets.length})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"destinations","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: destinations\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"terms\": {\n        \"field\": \"Dest\",\n        \"order\": {\n          \"_count\": \"asc\"\n        },\n        \"size\": 92\n      }\n    }\n  },\n  \"size\": 0,\n  \n  \"query\": {\n    \"match_all\":{}\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div class=\"ma-1\" style=\"border:1px solid #eaeaea; background: white;\">\n    <div class=\"info--text mx-3 pa-2\">\n    <div class=\"row display-1 d-flex justify-center\">\n        <div class=\"align-center pa-0\">\n            <i class=\"mdi mdi-airplane-landing\"></i>${value}\n        </div>\n        \n    </div>\n    <div class=\"pa-0 d-flex justify-center body-2\">\n                 Destinations\n        </div>\n</div>\n</div>\n\n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations.data.buckets.length})\n?>\n\n\nreturn(\"res\")\nhtml()"},{"name":"map","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: map\n **     SERVICE: http://localhost:8098\n **\n **/\n// <?javascript\n//     $scope.service = {host:\"localhost:9200\"}\n// ?>\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"origin\": {\n                  \"terms\": {\n                    \"field\": \"OriginCityName\",\n                    \"order\": {\n                      \"_count\": \"desc\"\n                    },\n                    \"size\": 100\n                  },\n                  \"aggs\": {\n                    \"dest\": {\n                      \"terms\": {\n                        \"field\": \"DestCityName\",\n                        \"order\": {\n                          \"_count\": \"desc\"\n                        },\n                        \"size\": 100\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n            \n              \"query\": {\n                \"bool\": {\n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                }\n              }\n            }\n        })\n    ?>\n    ,\n    returns: <? \n        d => {\n            let res = []\n            d.aggregations.origin.buckets.forEach( o => {\n                res = res.concat(\n                    o.dest.buckets.map( _d => ({\n                        origin: o.key,\n                        dest: _d.key,\n                        value: _d.doc_count\n                    }))\n                )\n            })\n            return res.filter(_d => _d.value > 10 && _d.origin != _d.dest)    \n        }\n    ?> \n)\nset(\"connections\")\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"filter_agg\": {\n                  \"filter\": {\n                    \"geo_bounding_box\": {\n                      \"ignore_unmapped\": true,\n                      \"DestLocation\": {\n                        \"top_left\": {\n                          \"lat\": 90,\n                          \"lon\": -180\n                        },\n                        \"bottom_right\": {\n                          \"lat\": -90,\n                          \"lon\": 180\n                        }\n                      }\n                    }\n                  },\n                  \"aggs\": {\n                     \"4\": {\n                        \"terms\": {\n                          \"field\": \"DestCityName\",\n                          \"order\": {\n                            \"_count\": \"desc\"\n                          },\n                          \"size\": 100\n                        },\n                        \"aggs\":{\n                          \"2\": {\n                            \"geohash_grid\": {\n                              \"field\": \"DestLocation\",\n                              \"precision\": 2\n                            },\n                            \"aggs\": {\n                              \"3\": {\n                                \"geo_centroid\": {\n                                  \"field\": \"DestLocation\"\n                                }\n                                \n                              }\n                            }\n                          }\n                        }\n                      }\n                  }\n                }\n              },\n              \"size\": 0,\n              \"query\": {\n                \"bool\": {\n                 \n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    },\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                }\n              }\n            }\n        })\n    ?>\n    ,\n    returns: <? \n        d => d.aggregations.filter_agg[\"4\"].buckets.map( r => [\n                r[\"2\"].buckets[0][\"3\"].location.lon,\n                r[\"2\"].buckets[0][\"3\"].location.lat,\n                r.doc_count,\n                r.key\n            ])\n    ?> \n)\n\nset(\"points\")\n\n<?javascript\n    $scope.connections = $scope.connections.map( d => ({\n      origin: _.find($scope.points, p => p[3] == d.origin),\n      dest: _.find($scope.points, p => p[3] == d.dest),\n      value: d.value,\n      originName: d.origin,\n      destName:d.dest\n    }))\n    .map( d => ({\n        coords:[\n            d.origin,\n            d.dest\n        ],\n        value: d.value,\n        originName: d.originName,\n        destName:d.destName\n    }))\n    \n    $scope.res = {\n        colorScale:true,\n        series:[\n            {\n    \t\t\t\"name\": \"Cities\",\n    \t\t\t\"type\": \"scatter\",\n    \t\t\tsymbolSizeRange:[2,40],\n    \t\t\t\"coordinateSystem\": \"geo\",\n    \t\t\t\"data\": $scope.points,\n    \t\t\t\"activeOpacity\": 1,\n    \t\t\t\"label\": {\n    \t\t\t\t\"normal\": {\n    \t\t\t\t\t\"position\": \"top\",\n    \t\t\t\t\t\"color\": \"#222\",\n    \t\t\t\t\t\"show\": true\n    \t\t\t\t},\n    \t\t\t\t\"emphasis\": {\n    \t\t\t\t\t\"show\": true\n    \t\t\t\t}\n    \t\t\t},\n    \t\t\t\"itemStyle\": {\n    \t\t\t\t\"normal\": {\n    \t\t\t\t\t\"borderColor\": \"#404a59\"\n    \t\t\t\t}\n    \t\t\t}\n\t\t    },\n\t\t{\n\t\t\t\"name\": \"Flights\",\n\t\t\t\"type\": \"lines\",\n\t\t\t\"zlevel\": 1,\n\t\t\t\"effect\": {\n\t\t\t\t\"show\": true,\n\t\t\t\t\"period\": 9,\n\t\t\t\t\"trailLength\": 0.2,\n\t\t\t\t\"color\": \"#999\",\n\t\t\t\t\"symbolSize\": 4\n\t\t\t},\n\t\t\t\"lineStyle\": {\n\t\t\t\t\"normal\": {\n\t\t\t\t    width:0,\n\t\t\t\t\tcolor:\"#999\",\n\t\t\t\t\t\"curveness\": 0.3\n\t\t\t\t},\n\t\t\t\t\"emphasis\":{\n\t\t\t\t    width:3,\n\t\t\t\t    color:\"#777\",\n\t\t\t\t    curveness: 0.3\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"data\": $scope.connections,\n\t\t\t\"symbolSize\": 6\n\t\t}\n\t\t ]\n\t}\n?>\nreturn (\"res\")\n"},{"name":"connections","script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: connections\n **     SERVICE: http://localhost:8098\n **\n **/\n// <?javascript\n//     $scope.service = {host:\"localhost:9200\"}\n// ?>\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"origin\": {\n                  \"terms\": {\n                    \"field\": \"OriginCityName\",\n                    \"order\": {\n                      \"_count\": \"desc\"\n                    },\n                    \"size\": 10 //100\n                  },\n                  \"aggs\": {\n                    \"dest\": {\n                      \"terms\": {\n                        \"field\": \"DestCityName\",\n                        \"order\": {\n                          \"_count\": \"desc\"\n                        },\n                        \"size\": 100\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n            \n              \"query\": {\n                \"bool\": {\n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                }\n              }\n            }\n        })\n    ?>\n    ,\n    returns: <? \n        d => {\n            let res = []\n            d.aggregations.origin.buckets.forEach( o => {\n                res = res.concat(\n                    o.dest.buckets.map( _d => ({\n                        origin: o.key,\n                        dest: _d.key,\n                        value: _d.doc_count\n                    }))\n                )\n            })\n            return res.filter(_d => _d.value > 10 && _d.origin != _d.dest)    \n        }\n    ?> \n)\nset(\"connections\")\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"filter_agg\": {\n                  \"filter\": {\n                    \"geo_bounding_box\": {\n                      \"ignore_unmapped\": true,\n                      \"DestLocation\": {\n                        \"top_left\": {\n                          \"lat\": 90,\n                          \"lon\": -180\n                        },\n                        \"bottom_right\": {\n                          \"lat\": -90,\n                          \"lon\": 180\n                        }\n                      }\n                    }\n                  },\n                  \"aggs\": {\n                     \"4\": {\n                        \"terms\": {\n                          \"field\": \"DestCityName\",\n                          \"order\": {\n                            \"_count\": \"desc\"\n                          },\n                          \"size\": 100\n                        },\n                        \"aggs\":{\n                          \"2\": {\n                            \"geohash_grid\": {\n                              \"field\": \"DestLocation\",\n                              \"precision\": 2\n                            },\n                            \"aggs\": {\n                              \"3\": {\n                                \"geo_centroid\": {\n                                  \"field\": \"DestLocation\"\n                                }\n                                \n                              }\n                            }\n                          }\n                        }\n                      }\n                  }\n                }\n              },\n              \"size\": 0,\n              \"query\": {\n                \"bool\": {\n                 \n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    },\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                }\n              }\n            }\n        })\n    ?>\n    ,\n    returns: <? \n        d => d.aggregations.filter_agg[\"4\"].buckets.map( r => [\n                r[\"2\"].buckets[0][\"3\"].location.lon,\n                r[\"2\"].buckets[0][\"3\"].location.lat,\n                r.doc_count,\n                r.key\n            ])\n    ?> \n)\n\nset(\"points\")\n\n<?javascript\n    $scope.connections = $scope.connections.map( d => ({\n      origin: _.find($scope.points, p => p[3] == d.origin),\n      dest: _.find($scope.points, p => p[3] == d.dest),\n      value: d.value\n    }))\n    \n    $scope.res = {\n        series:[{\n            data: $scope.points,\n            markLine:{\n                data: $scope.connections.map( d => [\n                    {x: d.origin[0], y: d.origin[1]},\n                    {x: d.dest[0], y: d.dest[1]},\n                    d.value\n                ])\n            }        \n        }]\n    }\n?>\nreturn (\"res\")\n"}],"data":{"source":"embedded","embedded":"<h2 color=\"#eee\"><center>not configured<center></h2><p>Use options dialog for configure this widget</p>","script":""},"id":"0gq3gejm3ut4","activated":false}]},"579lixs0nie":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 primary lighten-1 white--text font-weight-light pa-2\">\n   Flight Log\n</div> \n","script":""},"id":"ptd0j6aofd","activated":false},{"type":"data-table-widget","name":"log","icon":"mdi-grid","options":{"widget":{"visible":true},"headerTextOrientation":"horizontal","useColors":true,"palette":{"id":"YlGn_3","color":["#f7fcb9","#addd8e","#31a354"],"isReverse":false},"colorMode":"column","rowsPerPage":[10,25,50,{"text":"All","value":-1}],"usePagination":true,"dense":true,"typography":"caption","textColor":"default","textBackground":"default","fixedHeader":false,"pagination":true},"data":{"source":"embedded","embedded":{"dataset":{"dimensions":[],"source":[]}},"script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: table\n **     SERVICE: http://localhost:8098\n **\n **/\nservice.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"version\": true,\n  \"size\": 500,\n  \"sort\": [\n    {\n      \"timestamp\": {\n        \"order\": \"desc\",\n        \"unmapped_type\": \"boolean\"\n      }\n    }\n  ],\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"stored_fields\": [\n    \"*\"\n  ],\n  \"script_fields\": {\n    \"hour_of_day\": {\n      \"script\": {\n        \"source\": \"doc['timestamp'].value.hourOfDay\",\n        \"lang\": \"painless\"\n      }\n    }\n  },\n  \"docvalue_fields\": [\n    {\n      \"field\": \"timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"range\": {\n            \"AvgTicketPrice\": {\n              \"gte\": 100,\n              \"lte\": 997\n            }\n          }\n        },\n        {\n          \"range\": {\n            \"timestamp\": {\n              \"format\": \"strict_date_optional_time\",\n              \"gte\": \"2019-07-26T10:14:47.178Z\",\n              \"lte\": \"2019-07-27T10:14:47.178Z\"\n            }\n          }\n        }\n      ],\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": []\n    }\n  },\n  \"highlight\": {\n    \"pre_tags\": [\n      \"@kibana-highlighted-field@\"\n    ],\n    \"post_tags\": [\n      \"@/kibana-highlighted-field@\"\n    ],\n    \"fields\": {\n      \"*\": {}\n    },\n    \"fragment_size\": 2147483647\n  }\n}\n\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.hits.hits.map( d=> d._source )\n    $scope.res = {\n\t\"dataset\": {\n\t\t\"dimensions\": [\n\t\t    \n\t\t\t\"Flight Number\",\n\t\t\t\"Carrier\",\n\t\t\t\"Origin\",\n\t\t\t\"Destination\",\n\t\t\t\"Ticket Price (Avg)\",\n\t\t\t\"Distance (km)\",\n\t\t\t\"Cancelled\"\n\t\t],\n\t\t\"source\": $scope.fstat.map( d => {\n\t\t    let res = {\n\t\t        \n    \t\t\t\"Flight Number\": d.FlightNum,\n    \t\t\t\"Carrier\": d.Carrier,\n    \t\t\t\"Origin\":`${d.Origin} - ${d.OriginCountry} ${d.OriginCityName}`,\n    \t\t\t\"Destination\":`${d.Dest} - ${d.DestCountry} ${d.DestCityName}`,\n    \t\t\t\"Ticket Price (Avg)\": Number.parseFloat(d.AvgTicketPrice.toFixed(2)),\n    \t\t\t\"Distance (km)\": Number.parseFloat(d.DistanceKilometers.toFixed(0)),\n    \t\t\t\"Cancelled\": d.Cancelled\n\t\t    }\n\t\t    return res\n\t\t})\n\t}\n}\n?>\nreturn (\"res\")"},"id":"ge22hm64hiq","activated":false}]},"9bz8agwvcu5":{"widgets":[{"type":"html-widget","name":"noname_clone_o9s5lclw85a_clone_eysvtk56po","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 primary lighten-1 white--text font-weight-light pa-2\">\n    Activity\n</div> \n","script":""},"id":"eysvtk56po","activated":false},{"type":"bar-chart-widget","name":"activity","icon":"mdi-chart-bar","options":{"widget":{"visible":true},"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{"data":["Serie1","Serie2"]},"grid":{"left":"3%","right":"4%","bottom":"3%","containLabel":true},"yAxis":{"type":"value","boundaryGap":[0,0.01]},"xAxis":{"type":"category","data":["o1","o2","o3","o4","o5","o6"]},"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}],"style":"\n  widget-style {\n    background: white;\n    border:1px solid #eaeaea;\n  }\n"},"data":{"source":"embedded","embedded":{"legend":[],"xAxis":[],"series":[]},"script":"<?javascript\n    $scope.service = {host:\"localhost:9200\"}\n?>\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"time\": {\n                  \"date_histogram\": {\n                    \"field\": \"timestamp\",\n                    \"interval\": \"1d\",\n                    \"time_zone\": \"Europe/Kiev\",\n                    \"min_doc_count\": 1\n                  },\n                  \"aggs\": {\n                    \"flight_count\": {\n                      \"terms\": {\n                        \"field\": \"Carrier\",\n                        \"order\": {\n                          \"_count\": \"asc\"\n                        },\n                        \"size\": 5\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n             \n              \"query\": {\n                \"bool\": {\n                  \n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                  \n                }\n              }\n            }\n        })\n    ?>,\n    returns: <? \n        d => _.drop(d.aggregations.time.buckets.map( t => {\n            let res = {\n                time: moment(new Date(t.key_as_string)).format(\"YY-MM-DD\")\n            }\n            t.flight_count.buckets.forEach( c => {\n                res[c.key] = c.doc_count\n            })\n            return res\n        }))\n    ?> \n)\nc.select(where: <? d => _.keys(d).length > 1 ?>)\nc.order(by:\"time\")\nset(\"response\")\n\n\n\n<?javascript\n    let carriers = _.drop( _.keys( $scope.response[0]))\n    $scope.res = {\n    \t\"legend\": carriers,\n    \t\"xAxis\": $scope.response.map(d => d.time),\n    \t\"series\": carriers.map( c => ({\n    \t    name: c,\n    \t    type: \"bar\",\n    \t    stack: \"a\",\n    \t    \"areaStyle\":{\n    \t\t    opacity:0.3\n    \t\t},\n    \t\t\"data\": $scope.response.map(d => d[c]),\n    \t\t\"smooth\": true\n    \t    \n    \t}))\n\t\n    }\n?>\nreturn(\"res\")\n"},"id":"5ouow4i1psv","activated":false}]},"1s0fl89b4ed":{"widgets":[{"type":"html-widget","name":"noname_clone_baovfu83voh_clone_trbg367oscq_clone_uh31eyji4sf_clone_fbsa3h2z5tg_clone_kmdxhgo882_clone_23fr6ov66m1","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 primary lighten-1 white--text font-weight-light pa-2\">\n    Flights\n</div> \n","script":""},"id":"23fr6ov66m1","activated":false},{"type":"html-widget","name":"total_flights","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n                query:{\n                    match_all:{}\n                }\n            }\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"  style=\"border:2px solid #dedede; background:white;\">\n        <div class=\"primary--text darken-2 headline text-xs-center\">\n            &${relation.substring(0,2)}; ${value}\n        </div>\n        <div class=\"primary--text darken-2 subheading font-weight-light text-xs-center\">\n            Total Flights\n        </div>\n    </div>\n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)($scope.response.hits.total)\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"63eqm9qdnke","activated":false},{"type":"html-widget","name":"flight_success","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"2\": {\n      \"terms\": {\n        \"field\": \"Cancelled\",\n        \"order\": {\n          \"_count\": \"desc\"\n        },\n        \"size\": 5\n      }\n    }\n  },\n  \"size\": 0,\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"stored_fields\": [\n    \"*\"\n  ],\n  \"script_fields\": {\n    \"hour_of_day\": {\n      \"script\": {\n        \"source\": \"doc['timestamp'].value.hourOfDay\",\n        \"lang\": \"painless\"\n      }\n    }\n  },\n  \"docvalue_fields\": [\n    {\n      \"field\": \"timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"query\": {\n    \"bool\": {\n    //   \"must\": [\n    //     {\n    //       \"range\": {\n    //         \"timestamp\": {\n    //           \"format\": \"strict_date_optional_time\",\n    //           \"gte\": \"2019-07-25T10:28:46.129Z\",\n    //           \"lte\": \"2019-07-26T10:28:46.129Z\"\n    //         }\n    //       }\n    //     }\n    //   ],\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"   style=\"border:2px solid #dedede; background:white;\">\n\n        <div class=\"success--text darken-2 headline text-xs-center\">\n             ${value}\n        </div>\n        <div class=\"success--text darken-2 subheading font-weight-light text-xs-center\">\n            Flight Success\n        </div>\n    </div>   \n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations[\"2\"].buckets[0].doc_count})\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"rxsg4g8a6b","activated":false},{"type":"html-widget","name":"flight_delays","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \n  \"size\": 0,\n \n  \n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"match_phrase\": {\n            \"FlightDelay\": {\n              \"query\": true\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"  style=\"border:2px solid #dedede; background:white;\">\n        <div class=\"warning--text darken-2 headline text-xs-center\">\n             ${value}\n        </div>\n        <div class=\"warning--text darken-2 subheading font-weight-light text-xs-center\">\n            Flight Delays\n        </div>\n    </div>    \n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.hits.total.value})\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"1tuf0dbysfl","activated":false},{"type":"html-widget","name":"flight_cancellations","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"2\": {\n      \"terms\": {\n        \"field\": \"Cancelled\",\n        \"order\": {\n          \"_count\": \"desc\"\n        },\n        \"size\": 5\n      }\n    }\n  },\n  \"size\": 0,\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"stored_fields\": [\n    \"*\"\n  ],\n  \"script_fields\": {\n    \"hour_of_day\": {\n      \"script\": {\n        \"source\": \"doc['timestamp'].value.hourOfDay\",\n        \"lang\": \"painless\"\n      }\n    }\n  },\n  \"docvalue_fields\": [\n    {\n      \"field\": \"timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"query\": {\n    \"bool\": {\n    //   \"must\": [\n    //     {\n    //       \"range\": {\n    //         \"timestamp\": {\n    //           \"format\": \"strict_date_optional_time\",\n    //           \"gte\": \"2019-07-25T10:28:46.129Z\",\n    //           \"lte\": \"2019-07-26T10:28:46.129Z\"\n    //         }\n    //       }\n    //     }\n    //   ],\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"  style=\"border:2px solid #dedede; background:white;\">\n        <div class=\"error--text darken-2 headline text-xs-center\">\n             ${value}\n        </div>\n        <div class=\"error--text darken-2 subheading font-weight-light text-xs-center\">\n            Flight Cancellations\n        </div>\n    </div>    \n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations[\"2\"].buckets[1].doc_count})\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"bo26vb1z3ir","activated":false}]},"ia3zycvpweh":{"widgets":[{"type":"html-widget","name":"noname_clone_baovfu83voh_clone_trbg367oscq_clone_uh31eyji4sf_clone_fbsa3h2z5tg_clone_kmdxhgo882","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 primary lighten-1 white--text font-weight-light pa-2\">\n    Carriers\n</div> \n","script":""},"id":"kmdxhgo882","activated":false},{"type":"bar-chart-widget","name":"carrier_activity","icon":"mdi-chart-bar","options":{"widget":{"visible":true,"height":"200"},"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{"data":["Serie1","Serie2"]},"grid":{"left":"3%","right":"4%","bottom":"3%","containLabel":true},"xAxis":{"type":"value","boundaryGap":[0,0.01]},"yAxis":{"type":"category","data":["o1","o2","o3","o4","o5","o6"]},"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}],"color":["#0c2c84","#225ea8","#1d91c0","#41b6c4","#7fcdbb","#c7e9b4","#edf8b1","#ffffd9"],"palette":{"id":"YlGnBu_8","color":["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#0c2c84"],"isReverse":true},"style":"\n  widget-style {\n    background: white;\n    border:1px solid #eaeaea;\n  }\n"},"data":{"source":"embedded","embedded":{"legend":["Serie1","Serie2"],"yAxis":["o1","o2","o3","o4","o5","o6"],"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}]},"script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"2\": {\n      \"terms\": {\n        \"field\": \"Carrier\",\n        \"order\": {\n          \"_count\": \"desc\"\n        },\n        \"size\": 5\n      }\n    }\n  },\n  \"size\": 0,\n  \"_source\": {\n    \"excludes\": []\n  },\n  \"stored_fields\": [\n    \"*\"\n  ],\n  \"script_fields\": {\n    \"hour_of_day\": {\n      \"script\": {\n        \"source\": \"doc['timestamp'].value.hourOfDay\",\n        \"lang\": \"painless\"\n      }\n    }\n  },\n  \"docvalue_fields\": [\n    {\n      \"field\": \"timestamp\",\n      \"format\": \"date_time\"\n    }\n  ],\n  \"query\": {\n    \"bool\": {\n    //   \"must\": [\n    //     {\n    //       \"range\": {\n    //         \"timestamp\": {\n    //           \"format\": \"strict_date_optional_time\",\n    //           \"gte\": \"2019-07-25T10:57:13.181Z\",\n    //           \"lte\": \"2019-07-26T10:57:13.181Z\"\n    //         }\n    //       }\n    //     }\n    //   ],\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": []\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations[\"2\"].buckets\n?>\nget(\"fstat\")\nc.order(by:\"doc_count\")\ns.norm.log(by:\"doc_count\")\nset(\"fstat\")\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Carrier Activity\"\n\t],\n\t\"yAxis\":$scope.fstat.map( d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Carrier Activity\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map( d => Number.parseFloat(d.log.toFixed(2)))\n\t\t}\t\n\t]\n}\n?>\nreturn(\"res\")"},"id":"06bsvjz2cxab","activated":false},{"type":"bar-chart-widget","name":"carrier_robustness","icon":"mdi-chart-bar","options":{"widget":{"visible":true,"height":"200"},"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{"data":["Serie1","Serie2"]},"grid":{"left":"3%","right":"4%","bottom":"3%","containLabel":true},"xAxis":{"type":"value","boundaryGap":[0,0.01]},"yAxis":{"type":"category","data":["o1","o2","o3","o4","o5","o6"]},"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}],"color":["#31a354","#addd8e","#f7fcb9"],"palette":{"id":"YlGn_3","color":["#f7fcb9","#addd8e","#31a354"],"isReverse":true},"style":"\n  widget-style {\n    background: white;\n    border:1px solid #eaeaea;\n  }\n"},"data":{"source":"embedded","embedded":{"legend":["Serie1","Serie2"],"yAxis":["o1","o2","o3","o4","o5","o6"],"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}]},"script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"data\": {\n                  \"terms\": {\n                    \"field\": \"Carrier\",\n                    \"order\": {\n                      \"_count\": \"desc\"\n                    }\n                  }\n                }\n              },\n              \"size\":0,\n              \"query\": {\n                \n                \"match_phrase\": {\n                  \"Cancelled\": {\n                    \"query\": true\n                  }\n               }\n              }\n            }\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\n\ns.norm.log(by:\"doc_count\")\n\n\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Carries Robustness\"\n\t],\n\t\"yAxis\":$scope.fstat.map( d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Carries Robustness\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map( d => Number.parseFloat((1-d.log).toFixed(2)))\n\t\t}\t\n\t]\n}\n?>\nreturn(\"res\")"},"id":"1lb79tn41uq","activated":false}]},"aztej1zacy6":{"widgets":[{"type":"html-widget","name":"noname_clone_baovfu83voh_clone_trbg367oscq_clone_uh31eyji4sf_clone_fbsa3h2z5tg_clone_kmdxhgo882_clone_1cxrbf1umc2h","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 primary lighten-1 white--text font-weight-light pa-2\">\n    Flight Delays\n</div> \n","script":""},"id":"1cxrbf1umc2h","activated":false},{"type":"bar-chart-widget","name":"flight_delay_bar","icon":"mdi-chart-bar","options":{"widget":{"visible":true,"height":"200"},"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{"data":["Serie1","Serie2"]},"grid":{"left":"3%","right":"4%","bottom":"3%","containLabel":true},"yAxis":{"type":"value","boundaryGap":[0,0.01]},"xAxis":{"type":"category","data":["o1","o2","o3","o4","o5","o6"]},"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}],"color":["#d95f0e","#fec44f","#fff7bc"],"palette":{"id":"YlOrBr_3","color":["#fff7bc","#fec44f","#d95f0e"],"isReverse":true},"style":"\n  widget-style {\n    background: white;\n    border:1px solid #eaeaea;\n  }\n"},"data":{"source":"embedded","embedded":{"legend":["Serie1","Serie2"],"xAxis":["o1","o2","o3","o4","o5","o6"],"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}]},"script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: histdelay\n **     SERVICE: http://localhost:8098\n **\n **/\n\nservice.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n   cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"histogram\": {\n        \"field\": \"FlightDelayMin\",\n        \"interval\": 30,\n        \"min_doc_count\": 1\n      }\n    }\n  },\n  \"size\":0,\n  \"query\": {\n    \"bool\": {\n      \"filter\": [\n        {\n          \"match_all\": {}\n        },\n        {\n          \"match_all\": {}\n        }\n      ],\n      \"should\": [],\n      \"must_not\": [\n        {\n          \"match_phrase\": {\n            \"FlightDelayMin\": {\n              \"query\": 0\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n<?javascript\n    $scope.fstat = $scope.response.aggregations.data.buckets\n?>\nget(\"fstat\")\n\n\n\n<?javascript\n    $scope.res = {\n\t\"legend\": [\n\t\t\"Flight Delay\"\n\t],\n\t\"xAxis\": $scope.fstat.map(d => d.key),\n\t\"series\": [\n\t\t{\n\t\t\t\"name\": \"Flight Delay\",\n\t\t\t\"type\": \"bar\",\n\t\t\t\"data\": $scope.fstat.map(d => d.doc_count)\n\t\t}\n\t]\n}\n?>\nreturn(\"res\")"},"id":"iausaggtar","activated":false},{"type":"bar-chart-widget","name":"stacked","icon":"mdi-chart-bar","options":{"widget":{"visible":true,"height":"200"},"tooltip":{"trigger":"axis","axisPointer":{"type":"shadow"}},"legend":{"data":["Serie1","Serie2"]},"grid":{"left":"3%","right":"4%","bottom":"3%","containLabel":true},"yAxis":{"type":"value","boundaryGap":[0,0.01]},"xAxis":{"type":"category","data":["o1","o2","o3","o4","o5","o6"]},"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230]},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807]}],"color":["#666666","#a6761d","#e6ab02","#66a61e","#e7298a","#7570b3","#d95f02","#1b9e77"],"palette":{"id":"Dark2_8","color":["#1b9e77","#d95f02","#7570b3","#e7298a","#66a61e","#e6ab02","#a6761d","#666666"],"isReverse":true},"style":"\n  widget-style {\n    background: white;\n    border:1px solid #eaeaea;\n  }\n"},"data":{"source":"embedded","embedded":{"legend":["Serie1","Serie2"],"xAxis":["o1","o2","o3","o4","o5","o6"],"series":[{"name":"Serie1","type":"bar","data":[18203,23489,29034,104970,131744,630230],"stack":"a"},{"name":"Serie2","type":"bar","data":[19325,23438,31000,121594,134141,681807],"stack":"a"}]},"script":"\n/**\n **\n **     DATA PROCESSING SCRIPT: stacked\n **     SERVICE: http://localhost:8098\n **\n **/\n\n\n\n\n\n\nservice.es(\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"data\": {\n                  \"terms\": {\n                    \"field\": \"FlightDelayType\",\n                    \"order\": {\n                      \"_count\": \"desc\"\n                    },\n                    \"size\": 10\n                  }\n                }\n              },\n              \"size\": 0,\n              \"query\": {\n                \"match_all\": {}\n              }\n            }\n\n        })\n    ?>,\n    return: <? \n        d => d.aggregations.data.buckets.map( row => row.key )\n    ?>\n)\nset(\"series\")\n\nservice.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"data\": {\n                  \"date_histogram\": {\n                    \"field\": \"timestamp\",\n                    \"interval\": \"1h\",\n                    \"time_zone\": \"Europe/Kiev\",\n                    \"min_doc_count\": 1\n                  },\n                  \"aggs\": {\n                    \"data\": {\n                      \"terms\": {\n                        \"field\": \"FlightDelayType\",\n                        \"order\": {\n                          \"_count\": \"desc\"\n                        },\n                        \"size\": 5\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n              \n              \"query\": {\n                \"bool\": {\n                  \"must\": [\n                    \n                    {\n                      \"range\": {\n                        \"timestamp\": {\n                          \"format\": \"strict_date_optional_time\",\n                          \"gte\": \"2019-07-26T12:51:00.017Z\",\n                          \"lte\": \"2019-07-27T12:51:00.017Z\"\n                        }\n                      }\n                    }\n                  ]\n                  \n                }\n              }\n            }\n\n        })\n    ?>,\n    returns: <? \n   \n        d => d.aggregations.data.buckets.map( row => {\n             \n            let res = {\n                time: moment(new Date(row.key_as_string)).format(\"MMM DD HH:mm\")\n            }\n            $scope.series.forEach( s => {\n                let f = _.find(row.data.buckets, i => i.key == s)\n                res[s] = (f) ? f.doc_count : 0\n            })\n            return res\n        }) \n    ?>\n)\n\nset(\"data\")\n<?javascript\n    $scope.res = {\n\t\"legend\": $scope.series,\n\t\"xAxis\": $scope.data.map(d => d.time),\n\t\"series\": $scope.series.map( s => ({\n\t    name: s,\n\t    type:\"bar\",\n\t    stack:\"a\",\n\t    data: $scope.data.map( r => r[s])\n\t})) \n\t\n\t\n}\n?>\nreturn(\"res\")"},"id":"lju4vvo2lxm","activated":false}]},"4knze7eau2t":{"widgets":[{"type":"html-widget","name":"countries","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"terms\": {\n        \"field\": \"OriginCountry\",\n        \"order\": {\n          \"_count\": \"asc\"\n        },\n        \"size\": 92\n      }\n    }\n  },\n  \"size\": 0,\n  \n  \"query\": {\n    \"match_all\":{}\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"   style=\"border:2px solid #dedede; background:white;\">\n\n        <div class=\"success--text darken-2 headline text-xs-center\">\n             ${value}\n        </div>\n        <div class=\"success--text darken-2 subheading font-weight-light text-xs-center\">\n            Countries\n        </div>\n    </div>   \n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations.data.buckets.length})\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"ybqzi3t7e5q","activated":false},{"type":"html-widget","name":"origins","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"terms\": {\n        \"field\": \"Origin\",\n        \"order\": {\n          \"_count\": \"asc\"\n        },\n        \"size\": 92\n      }\n    }\n  },\n  \"size\": 0,\n  \n  \"query\": {\n    \"match_all\":{}\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"   style=\"border:2px solid #dedede; background:white;\">\n\n        <div class=\"success--text darken-2 headline text-xs-center\">\n             ${value}\n        </div>\n        <div class=\"success--text darken-2 subheading font-weight-light text-xs-center\">\n            Origins\n        </div>\n    </div>   \n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations.data.buckets.length})\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"zt25ee9pak","activated":false},{"type":"html-widget","name":"destinations","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"primary--text\">\n    wait...\n</div>","script":"service.es (\n    from: <? ({host:\"localhost:9200\"}) ?>,\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            index: 'kibana_sample_data_flights',\n            body: {\n  \"aggs\": {\n    \"data\": {\n      \"terms\": {\n        \"field\": \"Dest\",\n        \"order\": {\n          \"_count\": \"asc\"\n        },\n        \"size\": 92\n      }\n    }\n  },\n  \"size\": 0,\n  \n  \"query\": {\n    \"match_all\":{}\n  }\n}\n        })\n    ?>\n)\nset(\"response\")\n\n<?html\n<div>\n    <div class=\"pa-2 ma-2\"   style=\"border:2px solid #dedede; background:white;\">\n\n        <div class=\"success--text darken-2 headline text-xs-center\">\n             ${value}\n        </div>\n        <div class=\"success--text darken-2 subheading font-weight-light text-xs-center\">\n            Destinations\n        </div>\n    </div>   \n</div>    \n?>\nset(\"template\")\n<?javascript\n    $scope.res = _.template($scope.template)({value: $scope.response.aggregations.data.buckets.length})\n?>\n\n\nreturn(\"res\")\nhtml()"},"id":"ujdvhgi82h9","activated":false}]},"4f1j44cmjeg":{"widgets":[{"type":"geo-markers-chart-widget","name":"map","icon":"mdi-map-marker","options":{"0":[4.895168,52.370216,1,"Amsterdam"],"1":[-83.357567,33.951935,2,"Athens"],"2":[174.763332,-36.84846,3,"Auckland"],"3":[100.501765,13.756331,4,"Bangkok"],"4":[2.173403,41.385064,5,"Barcelona"],"5":[30.5234,50.4501,6,"Kiev"],"6":[25.279651,54.687156,7,"Vilnius"],"7":[21.012229,52.229676,8,"Warsaw"],"8":[16.373819,48.208174,9,"Vienna"],"widget":{"visible":true,"height":"500"},"map":{"locale":"en","scope":"World","name":"World"},"geo":{"map":"World","silent":true,"label":{"emphasis":{"show":false,"areaColor":"#eee"}},"itemStyle":{"normal":{"borderWidth":0.2,"borderColor":"#404a59"}},"roam":true,"boundingCoords":[[-149.97549976687878,-48.255812442395836],[178.5545021155849,78.7343124258332]]},"visualMap":{"align":"auto","orient":"horizontal","dimension":2,"inRange":{"color":["#1a9641","#a6d96a","#fdae61","#d7191c"]},"outOfRange":{"color":["#dedede"]},"text":["High","Low"],"calculable":true,"min":11,"max":369,"precision":3},"series":[{"data":[[8.549169916659594,47.46469896286726,691,"Zurich"],[108.7519989721477,34.44710197392851,526,"Xi'an"],[121.57588455548009,31.170024663056314,479,"Shanghai"],[-97.23989870399237,49.909999812953174,460,"Winnipeg"],[139.9842695170867,35.62389545053704,445,"Tokyo"],[20.967100113630295,52.16569899581373,405,"Warsaw"],[10.888499999418855,45.39569896180183,390,"Verona"],[16.569700157269835,48.11029812321067,377,"Vienna"],[12.351899994537234,45.50529896747321,344,"Venice"],[7.649629935622215,45.20080198533833,332,"Torino"],[128.44500697217882,51.16999696008861,331,"Belogorsk"],[-0.33329778192366694,51.521467838116486,329,"London"],[-58.535800063982606,-34.822200019843876,305,"Buenos Aires"],[12.194399926811457,45.6483989674598,293,"Treviso"],[151.17700195871294,-33.94609835464507,269,"Sydney"],[17.91860000230372,59.65190122369677,255,"Stockholm"],[37.41459991782904,55.97259898670018,249,"Moscow"],[9.036714352550916,45.52625566633651,240,"Milan"],[-78.3575000334531,-0.12916667852550745,237,"Quito"],[78.42985530383885,17.2313175117597,193,"Hyderabad"],[10.39269994944334,43.68389896117151,192,"Pisa"],[12.298534716143035,41.8001307175051,191,"Rome"],[-75.66919712349772,45.3224982926622,190,"Ottawa"],[11.10039995983243,60.193901024758816,178,"Oslo"],[28.245999980717897,-26.139200027100742,173,"Johannesburg"],[14.290799992159009,40.886001996695995,170,"Naples"],[11.78609998896718,48.3538019657135,169,"Munich"],[33.46390150487423,68.15180202014744,159,"Olenegorsk"],[141.69200127013028,42.77519986499101,156,"Chitose / Tomakomai"],[-73.74079897999763,45.47060010954738,152,"Montreal"],[135.34167232190998,34.60763469254919,145,"Osaka"],[126.61243694050492,37.51145443922619,139,"Seoul"],[144.84300199896097,-37.67330203671008,128,"Melbourne"],[-2.274950109422207,53.353698696009815,120,"Manchester"],[-66.00180060602725,18.439399707131088,116,"San Juan"],[-97.43309788405895,37.64989850576967,103,"Wichita"],[-99.07209808006883,19.436299977824092,99,"Mexico City"],[-79.63059998117387,43.67720031179488,98,"Toronto"],[-77.45580296963453,38.944499962963164,96,"Washington"],[31.119722155854106,-29.614444454200566,93,"Durban"],[-74.14690000936389,4.701589993201196,91,"Bogota"],[-77.11430403403938,-12.02190002426505,80,"Lima"],[-122.59799961000681,45.588699323125184,80,"Portland"],[77.70629899576306,13.197899982333183,78,"Bangalore"],[126.49299616925418,33.51129911374301,75,"Jeju City"],[-95.88809972628951,36.19839855004102,69,"Tulsa"],[77.1031039673835,28.56649998575449,68,"New Delhi"],[-122.30858044754436,47.453836962761386,67,"Seattle"],[8.837499925866723,44.41329997032881,63,"Genova"],[24.963300693780184,60.31719970051199,62,"Helsinki"],[-110.9410019684583,32.11610027588904,62,"Tucson"],[-117.53399661742151,47.61989974882454,60,"Spokane"],[-82.53320317715406,27.975500081665814,60,"Tampa"],[-92.50000001862645,43.90829847659916,58,"Rochester"],[8.570555923506618,50.0333329802379,54,"Frankfurt am Main"],[-112.01200107112527,33.434299430809915,54,"Phoenix"],[-76.10630038194358,43.11119842808694,54,"Syracuse"],[9.704169938340783,45.67390099167824,52,"Bergamo"],[-122.37500008195639,37.61899945791811,49,"San Francisco"],[12.656000135466456,55.617900816723704,48,"Copenhagen"],[113.29900357872248,23.392400736920536,48,"Guangzhou"],[-117.19000247307122,32.73360061459243,47,"San Diego"],[-90.50749976187944,41.44850158598274,46,"Moline"],[-80.23290258832276,40.49150080885738,45,"Pittsburgh"],[-78.78749853931367,35.877601616084576,45,"Raleigh/Durham"],[-77.31970215216279,37.505199406296015,45,"Richmond"],[-70.78579715453088,-33.39300158433616,45,"Santiago"],[-6.270070094615221,53.42129895463586,44,"Dublin"],[-113.58000185340643,53.30969999078661,44,"Edmonton"],[13.090999955311418,38.175998968072236,43,"Palermo"],[-81.2021027226001,32.1276015881449,43,"Savannah"],[-89.83519703149796,38.54519996792078,42,"Belleville"],[-75.24109653197229,39.87189862411469,42,"Philadelphia"],[55.36439895629883,25.252799978479743,41,"Dubai"],[-90.37000302225351,38.748696986585855,40,"St Louis"],[7.1427397057414055,50.86589811835438,38,"Cologne"],[-86.67819980531931,36.12450025510043,38,"Nashville"],[-98.46980293281376,29.533700910396874,38,"San Antonio"],[-111.97799686342478,40.78839871566743,37,"Salt Lake City"],[-76.49299629963934,37.131900787353516,35,"Newport News"],[-119.76799777708948,39.499099692329764,35,"Reno"],[72.86789702251554,19.088699310086668,34,"Mumbai"],[-74.168701171875,40.692501068115234,34,"Newark"],[-76.20120246894658,36.89459988847375,32,"Norfolk"],[-81.23750310391188,28.77759930677712,31,"Orlando"],[-93.22180182673037,44.88199994433671,30,"Minneapolis"],[103.94699854776263,30.578500740230083,29,"Chengdu"],[-89.97669990174472,35.04240032751113,29,"Memphis"],[-79.93730169720948,36.097801169380546,28,"Greensboro"],[2.549999915063381,49.012798299081624,28,"Paris"],[136.804992640391,34.8583984002471,28,"Tokoname"],[-80.29060369357467,25.79319950658828,27,"Miami"],[-90.25800327770412,29.993400564417243,26,"New Orleans"],[9.054279997944832,39.25149898510426,25,"Cagliari"],[-115.15200046822429,36.08010097872466,25,"Las Vegas"],[-85.73600004427135,38.17439999431372,25,"Louisville"],[-94.7138980217278,39.297599997371435,22,"Kansas City"],[-86.29440302029252,39.71729999408126,19,"Indianapolis"],[-118.40799710713327,33.94250105135143,19,"Los Angeles"],[153.11700434423983,-27.384199141524732,18,"Brisbane"]],"markLine":{"data":[[{"x":12.298534716143035,"y":41.8001307175051},{"x":-0.33329778192366694,"y":51.521467838116486},21],[{"x":12.298534716143035,"y":41.8001307175051},{"x":-58.535800063982606,"y":-34.822200019843876},18],[{"x":12.298534716143035,"y":41.8001307175051},{"x":10.888499999418855,"y":45.39569896180183},17],[{"x":12.298534716143035,"y":41.8001307175051},{"x":121.57588455548009,"y":31.170024663056314},16],[{"x":12.298534716143035,"y":41.8001307175051},{"x":-78.3575000334531,"y":-0.12916667852550745},14],[{"x":12.298534716143035,"y":41.8001307175051},{"x":139.9842695170867,"y":35.62389545053704},13],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":-78.3575000334531,"y":-0.12916667852550745},18],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":121.57588455548009,"y":31.170024663056314},16],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":-58.535800063982606,"y":-34.822200019843876},15],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":9.036714352550916,"y":45.52625566633651},15],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":17.91860000230372,"y":59.65190122369677},13],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":139.9842695170867,"y":35.62389545053704},13],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":-2.274950109422207,"y":53.353698696009815},12],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":-66.00180060602725,"y":18.439399707131088},12],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":-73.74079897999763,"y":45.47060010954738},11],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":33.46390150487423,"y":68.15180202014744},11],[{"x":-0.33329778192366694,"y":51.521467838116486},{"x":-75.66919712349772,"y":45.3224982926622},11],[{"x":-78.3575000334531,"y":-0.12916667852550745},{"x":-58.535800063982606,"y":-34.822200019843876},21],[{"x":-78.3575000334531,"y":-0.12916667852550745},{"x":139.9842695170867,"y":35.62389545053704},14],[{"x":-78.3575000334531,"y":-0.12916667852550745},{"x":144.84300199896097,"y":-37.67330203671008},11],[{"x":-78.3575000334531,"y":-0.12916667852550745},{"x":14.290799992159009,"y":40.886001996695995},11],[{"x":-78.3575000334531,"y":-0.12916667852550745},{"x":121.57588455548009,"y":31.170024663056314},11],[{"x":135.34167232190998,"y":34.60763469254919},{"x":12.298534716143035,"y":41.8001307175051},16],[{"x":135.34167232190998,"y":34.60763469254919},{"x":-0.33329778192366694,"y":51.521467838116486},14],[{"x":135.34167232190998,"y":34.60763469254919},{"x":139.9842695170867,"y":35.62389545053704},13],[{"x":135.34167232190998,"y":34.60763469254919},{"x":-58.535800063982606,"y":-34.822200019843876},12],[{"x":135.34167232190998,"y":34.60763469254919},{"x":12.194399926811457,"y":45.6483989674598},12],[{"x":135.34167232190998,"y":34.60763469254919},{"x":77.70629899576306,"y":13.197899982333183},11],[{"x":126.61243694050492,"y":37.51145443922619},{"x":12.298534716143035,"y":41.8001307175051},12],[{"x":139.9842695170867,"y":35.62389545053704},{"x":12.351899994537234,"y":45.50529896747321},22],[{"x":139.9842695170867,"y":35.62389545053704},{"x":20.967100113630295,"y":52.16569899581373},20],[{"x":139.9842695170867,"y":35.62389545053704},{"x":7.649629935622215,"y":45.20080198533833},19],[{"x":139.9842695170867,"y":35.62389545053704},{"x":108.7519989721477,"y":34.44710197392851},19],[{"x":139.9842695170867,"y":35.62389545053704},{"x":8.549169916659594,"y":47.46469896286726},17],[{"x":139.9842695170867,"y":35.62389545053704},{"x":128.44500697217882,"y":51.16999696008861},15],[{"x":139.9842695170867,"y":35.62389545053704},{"x":16.569700157269835,"y":48.11029812321067},15],[{"x":139.9842695170867,"y":35.62389545053704},{"x":12.194399926811457,"y":45.6483989674598},13],[{"x":139.9842695170867,"y":35.62389545053704},{"x":10.888499999418855,"y":45.39569896180183},13],[{"x":139.9842695170867,"y":35.62389545053704},{"x":-97.23989870399237,"y":49.909999812953174},12],[{"x":-58.535800063982606,"y":-34.822200019843876},{"x":139.9842695170867,"y":35.62389545053704},13],[{"x":-58.535800063982606,"y":-34.822200019843876},{"x":121.57588455548009,"y":31.170024663056314},12],[{"x":-58.535800063982606,"y":-34.822200019843876},{"x":-73.74079897999763,"y":45.47060010954738},11],[{"x":-74.14690000936389,"y":4.701589993201196},{"x":-0.33329778192366694,"y":51.521467838116486},13],[{"x":121.57588455548009,"y":31.170024663056314},{"x":8.549169916659594,"y":47.46469896286726},19],[{"x":121.57588455548009,"y":31.170024663056314},{"x":7.649629935622215,"y":45.20080198533833},18],[{"x":121.57588455548009,"y":31.170024663056314},{"x":128.44500697217882,"y":51.16999696008861},16],[{"x":121.57588455548009,"y":31.170024663056314},{"x":16.569700157269835,"y":48.11029812321067},16],[{"x":121.57588455548009,"y":31.170024663056314},{"x":17.91860000230372,"y":59.65190122369677},15],[{"x":121.57588455548009,"y":31.170024663056314},{"x":139.9842695170867,"y":35.62389545053704},15],[{"x":121.57588455548009,"y":31.170024663056314},{"x":10.888499999418855,"y":45.39569896180183},15],[{"x":121.57588455548009,"y":31.170024663056314},{"x":-97.23989870399237,"y":49.909999812953174},15],[{"x":121.57588455548009,"y":31.170024663056314},{"x":151.17700195871294,"y":-33.94609835464507},12],[{"x":121.57588455548009,"y":31.170024663056314},{"x":12.194399926811457,"y":45.6483989674598},12],[{"x":121.57588455548009,"y":31.170024663056314},{"x":12.351899994537234,"y":45.50529896747321},12],[{"x":121.57588455548009,"y":31.170024663056314},{"x":37.41459991782904,"y":55.97259898670018},11],[{"x":9.036714352550916,"y":45.52625566633651},{"x":-58.535800063982606,"y":-34.822200019843876},16],[{"x":9.036714352550916,"y":45.52625566633651},{"x":121.57588455548009,"y":31.170024663056314},16],[{"x":9.036714352550916,"y":45.52625566633651},{"x":139.9842695170867,"y":35.62389545053704},12],[{"x":9.036714352550916,"y":45.52625566633651},{"x":108.7519989721477,"y":34.44710197392851},12]]},"symbolSize":6,"name":"Serie 0"}],"color":["#1a9641","#a6d96a","#fdae61","#d7191c"],"palette":{"id":"RdYlGn_4","color":["#d7191c","#fdae61","#a6d96a","#1a9641"],"isReverse":true},"style":"\n  widget-style {\n    background: white;\n    border:1px solid #eaeaea;\n  }\n"},"data":{"source":"embedded","embedded":{"series":[]},"script":"<?javascript\n    $scope.service = {host:\"localhost:9200\"}\n?>\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"origin\": {\n                  \"terms\": {\n                    \"field\": \"OriginCityName\",\n                    \"order\": {\n                      \"_count\": \"desc\"\n                    },\n                    \"size\": 10 //100\n                  },\n                  \"aggs\": {\n                    \"dest\": {\n                      \"terms\": {\n                        \"field\": \"DestCityName\",\n                        \"order\": {\n                          \"_count\": \"desc\"\n                        },\n                        \"size\": 100\n                      }\n                    }\n                  }\n                }\n              },\n              \"size\": 0,\n            \n              \"query\": {\n                \"bool\": {\n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                }\n              }\n            }\n        })\n    ?>\n    ,\n    returns: <? \n        d => {\n            let res = []\n            d.aggregations.origin.buckets.forEach( o => {\n                res = res.concat(\n                    o.dest.buckets.map( _d => ({\n                        origin: o.key,\n                        dest: _d.key,\n                        value: _d.doc_count\n                    }))\n                )\n            })\n            return res.filter(_d => _d.value > 10 && _d.origin != _d.dest)    \n        }\n    ?> \n)\nset(\"connections\")\n\nservice.es (\n    from: {{service}},\n    cmd:\"search\",\n    args:\n    <? \n        ({\n            // index: 'kibana_sample_data_flights',\n            body: {\n              \"aggs\": {\n                \"filter_agg\": {\n                  \"filter\": {\n                    \"geo_bounding_box\": {\n                      \"ignore_unmapped\": true,\n                      \"DestLocation\": {\n                        \"top_left\": {\n                          \"lat\": 90,\n                          \"lon\": -180\n                        },\n                        \"bottom_right\": {\n                          \"lat\": -90,\n                          \"lon\": 180\n                        }\n                      }\n                    }\n                  },\n                  \"aggs\": {\n                     \"4\": {\n                        \"terms\": {\n                          \"field\": \"DestCityName\",\n                          \"order\": {\n                            \"_count\": \"desc\"\n                          },\n                          \"size\": 100\n                        },\n                        \"aggs\":{\n                          \"2\": {\n                            \"geohash_grid\": {\n                              \"field\": \"DestLocation\",\n                              \"precision\": 2\n                            },\n                            \"aggs\": {\n                              \"3\": {\n                                \"geo_centroid\": {\n                                  \"field\": \"DestLocation\"\n                                }\n                                \n                              }\n                            }\n                          }\n                        }\n                      }\n                  }\n                }\n              },\n              \"size\": 0,\n              \"query\": {\n                \"bool\": {\n                 \n                  \"filter\": [\n                    {\n                      \"match_all\": {}\n                    },\n                    {\n                      \"match_all\": {}\n                    }\n                  ]\n                }\n              }\n            }\n        })\n    ?>\n    ,\n    returns: <? \n        d => d.aggregations.filter_agg[\"4\"].buckets.map( r => [\n                r[\"2\"].buckets[0][\"3\"].location.lon,\n                r[\"2\"].buckets[0][\"3\"].location.lat,\n                r.doc_count,\n                r.key\n            ])\n    ?> \n)\n\nset(\"points\")\n\n<?javascript\n    $scope.connections = $scope.connections.map( d => ({\n      origin: _.find($scope.points, p => p[3] == d.origin),\n      dest: _.find($scope.points, p => p[3] == d.dest),\n      value: d.value,\n      originName: d.origin,\n      destName:d.dest\n    }))\n    .map( d => ({\n        coords:[\n            d.origin,\n            d.dest\n        ],\n        value: d.value,\n        originName: d.originName,\n        destName:d.destName\n    }))\n    \n    $scope.res = {\n        colorScale:true,\n        series:[\n            {\n    \t\t\t\"name\": \"Cities\",\n    \t\t\t\"type\": \"scatter\",\n    \t\t\tsymbolSizeRange:[2,40],\n    \t\t\t\"coordinateSystem\": \"geo\",\n    \t\t\t\"data\": $scope.points,\n    \t\t\t\"activeOpacity\": 1,\n    \t\t\t\"label\": {\n    \t\t\t\t\"normal\": {\n    \t\t\t\t\t\"position\": \"top\",\n    \t\t\t\t\t\"color\": \"#222\",\n    \t\t\t\t\t\"show\": true\n    \t\t\t\t},\n    \t\t\t\t\"emphasis\": {\n    \t\t\t\t\t\"show\": true\n    \t\t\t\t}\n    \t\t\t},\n    \t\t\t\"itemStyle\": {\n    \t\t\t\t\"normal\": {\n    \t\t\t\t\t\"borderColor\": \"#404a59\"\n    \t\t\t\t}\n    \t\t\t}\n\t\t    },\n\t\t{\n\t\t\t\"name\": \"Flights\",\n\t\t\t\"type\": \"lines\",\n\t\t\t\"zlevel\": 1,\n\t\t\t\"effect\": {\n\t\t\t\t\"show\": true,\n\t\t\t\t\"period\": 6,\n\t\t\t\t\"trailLength\": 0.5,\n\t\t\t\t\"color\": \"#999\",\n\t\t\t\t\"symbolSize\": 4\n\t\t\t},\n\t\t\t\"lineStyle\": {\n\t\t\t\t\"normal\": {\n\t\t\t\t    width:0,\n\t\t\t\t\tcolor:\"#999\",\n\t\t\t\t\t\"curveness\": 0.3\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"data\": $scope.connections,\n\t\t\t\"symbolSize\": 6\n\t\t}\n\t\t ]\n\t}\n?>\nreturn (\"res\")\n"},"id":"rrr755yo45h","activated":false}]},"op84or84zda":{"widgets":[{"type":"html-widget","name":"noname_clone_baovfu83voh_clone_trbg367oscq_clone_uh31eyji4sf_clone_fbsa3h2z5tg_clone_kmdxhgo882_clone_1s43tslzemi","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"display-1 primary lighten-1 white--text font-weight-light pa-2\">\n    Locations\n</div> \n","script":""},"id":"1s43tslzemi","activated":false}]}},"id":"flights","title":"Flight Monitor","url":"https://jace-dev.herokuapp.com/design/ElasticSearch#/flights"},{"layout":"flex","sections":[{"align":"justify-center","holders":[{"name":"default","width":10}]},{"align":"justify-center","holders":[{"name":"yvs2qaygyfn","width":3},{"name":"3ydk5ola3if","width":4}]}],"holders":{"default":{"widgets":[{"type":"html-widget","name":"noname_clone_8jopl2l8nyy","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<h2 class=\"primary--text display-3 font-weight-light mb-4 pb-4\">\r\n      <center>service.es()</center>\r\n</h2>","script":""},"id":"8jopl2l8nyy"},{"type":"html-widget","name":"noname_clone_b4y25uod04l","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<center class=\"headline font-weight-light\">\r\n      Now you can use dps command <b>service.es</b> \r\n      to fetch data from elasticsearch\r\n</center>","script":""},"id":"b4y25uod04l"},{"type":"edu-editor-widget","name":"noname","icon":"mdi-code-braces","options":{"widget":{"visible":true}},"data":{"embedded":{"lang":"dps","readOnly":true},"script":"service.es(\n\t\t\t\t\n    from: {{service}},\n    cmd:\"count\",\n    args:<? {\n        index:\"kibana_sample_data_flights\",\n        body: {\n \n              \"query\": {\n            \t\"bool\": {\n            \t\t\"must\": [],\n            \t\t\"filter\": [\n            \t\t\t{\n            \t\t\t\t\"match_all\": {}\n            \t\t\t}\n            \t\t],\n            \t\t\"should\": [],\n            \t\t\"must_not\": []\n            \t}\n            }\n \n        }\n    } ?>"},"id":"q1cz5z68u9n"},{"type":"html-widget","name":"noname_clone_s1uqixtz2no","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"px-3 pt-5\">\n<p>\n    The fetched data is showed below\n</p>\n</div>","script":""},"id":"s1uqixtz2no"},{"type":"edu-editor-widget","name":"noname","icon":"mdi-code-braces","options":{"widget":{"visible":true}},"data":{"embedded":{"lang":"json","readOnly":true},"script":"{\r\n    \"count\": 13059,\r\n    \"_shards\": {\r\n        \"total\": 1,\r\n        \"successful\": 1,\r\n        \"skipped\": 0,\r\n        \"failed\": 0\r\n    }\r\n}"},"id":"xjji4mkp0l"},{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<h2 class=\"primary--text display-3 font-weight-light my-4 py-4\">\r\n      <center>Our examples</center>\r\n</h2>","script":""},"id":"rpj39saktt"}]},"yvs2qaygyfn":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<a href=\"./design/ElasticSearch#/explorer\" style=\"text-decoration:none\">\n<div class=\"primary--text pa-3\" style=\"background:white; border:1px solid #eaeaea;\">\n<div class=\"display-1 font-weight-light\">\n     <i class=\"mdi mdi-feature-search-outline pr-2\"></i>Indices Exploration\n</div>\n<div class=\"caption font-weight-light\">\n    Analyze Elasticsearch Indices (Mappings and data of indices)\n</div>\n</div>\n</a>\n","script":""},"id":"o7cu2d01brj"}]},"3ydk5ola3if":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<a href=\"./design/ElasticSearch#/flights\" style=\"text-decoration:none\">\n<div class=\"primary--text pa-3\" style=\"background:white; border:1px solid #eaeaea;\">\n<div class=\"display-1 font-weight-light\">\n     <i class=\"mdi mdi-airplane pr-2\"></i>Global Flight Dashboard\n</div>\n<div class=\"caption font-weight-light\">\n    Analyze mock flight data for ES-Air, Logstash Airways, Kibana Airlines and JetBeats\n</div> \n</div>\n</a>","script":""},"id":"8t8tord0pu3"}]}},"id":"service","title":"service.es","url":"http://dj-next.herokuapp.com/design/ElasticSearch#/service"}],"name":"ElasticSearch","i18n":{"en":{},"uk":{}},"icon":"https://cdn.iconscout.com/icon/free/png-512/elasticsearch-226094.png","skin":{"holders":{"AppHeader":{"widgets":[{"type":"html-widget","name":"noname","icon":"mdi-language-html5","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":"<div class=\"row mx-0\">\n    <!--<div class=\"col\">-->\n        <span \n                class=\"secondary--text display-2 font-weight-light\"\n                style=\"\n                            height: 100px;\n            background: url(https://cdn.iconscout.com/icon/free/png-512/elasticsearch-226094.png) no-repeat;\n            background-size: contain;\n            margin: 0 -1px 0 1em;\n            padding: 0.55em 0em 0em 3em;\"\n        >\n            How to use ElasticSearch in your Jace apps\n        </span>        \n    <!--</div>-->\n    <div class=\"spacer\"></div>\n    <!--<div class=\"col\">-->\n        <a href=\"https://www.elastic.co/\" target=\"_blank\">\n            <div class=\"ma-1\">\n            <center>\n                <div class=\"pa-3\" style=\"border: 1px solid #eaeaea;\n                display: inline-block;\n                background: white;\">\n                  <h5 class=\"brand-title text-dark caption\">Thanks to</h5>\n                \n                  <div class=\"brand-logo\">\n                    <img \n                        alt=\"\" \n                        src=\"https://cdn.iconscout.com/icon/free/png-512/elasticsearch-226094.png\"\n                        style=\"width:2em\"\n                    >\n                  </div>\n                <h5 class=\"brand-title text-dark caption\">Elastic</h5>\n            </div>\n            </center>\n            </div>\n</a>\n<a href=\"https://elements.heroku.com/addons/bonsai\" target=\"_blank\">\n            <div class=\"my-1 ml-0 mr-2\">\n            <center>\n                <div class=\"pa-3\" style=\"border: 1px solid #eaeaea;\n                display: inline-block;\n                background: white;\">\n                  <h5 class=\"brand-title text-dark caption\">Thanks to</h5>\n                \n                  <div class=\"brand-logo\">\n                    <img \n                        alt=\"Elasticsearch, pure and simple.\" \n                        src=\"https://s3.amazonaws.com/assets.heroku.com/addons.heroku.com/icons/854/original.png?1429293570\"\n                        style=\"width:2em\"\n                    >\n                  </div>\n                <h5 class=\"brand-title text-dark caption\">Bonsai</h5>\n            </div>\n            </center>\n            </div>\n</a>\n    <!--</div>-->\n</div>\n","script":""},"id":"5nia14kv2ci","activated":false},{"type":"app-topbar-widget","name":"noname","icon":"mdi-page-layout-header","options":{"widget":{"visible":true}},"data":{"source":"embedded","embedded":{"title":"","locale":false,"user":false,"login":false,"references":[{"title":"About ElasticSearch","id":" "},{"title":"service.es()","id":"service"},{"title":"Indices Explorer","id":"explorer"},{"title":"Flight Monitor","id":"flights"}]},"script":""},"id":"z8fnd0cwzl","activated":false},{"type":"mediator-widget","name":"noname","icon":"mdi-language-javascript","options":{"widget":{"visible":true}},"data":{"script":"    \n    let mediator = this;\n    \n    window.esUrl =  \"https://6j8r7jyggw:lb7c2qme4i@smoke-585118521.eu-west-1.bonsaisearch.net:443\"\n    mediator.emit(\"init-page-state\")\n   \n    window.esService = {\n        host: window.esUrl\n    }\n\n    mediator.$nextTick(() => {\n        mediator.api.emit(\"start-page-script\")\n    })\n\n    "},"id":"kqlijvlfvnj","activated":false}]},"AppFooter":{"widgets":[]}}},"dpsURL":"https://jace-dps.herokuapp.com","theme":{"primary":"#0065a4","secondary":"#37474F","accent":"#8E24AA","error":"#f44336","info":"#0091EA","success":"#388E3C","warning":"#E65100"},"importedFromURL":"http://jace-dev.herokuapp.com/app/ElasticSearch","importedFromAuthor":"Andrey Boldak"}